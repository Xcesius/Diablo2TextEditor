{
  "overview": "This file controls all skill functionalities. Skills are abilities used by all units in the game.  This file uses many other data files, and other data files will reference fields in this file to verify certain functionalities.  Any column field name starting with “*” is considered a comment field and is not used by the game",
  "data_fields": [
    {
      "name": "skill",
      "description": "Defines the unique name ID for the skill, which is how other files can reference the skill. The order of the defined skills will determine their ID numbers, so they should not be reordered."
    },
    {
      "name": "charclass",
      "description": "Assigns the skill to a specific character class which affects how skill item modifiers work and what skills the class can learn. Code ama bar pal nec sor dru ass Description Amazon Barbarian Paladin Necromancer Sorceress Druid Assassin"
    },
    {
      "name": "skilldesc",
      "description": "Controls the skill’s tooltip and general UI display. Points to a “skilldesc” field in the skilldesc.txt file."
    },
    {
      "name": "srvstfunc",
      "description": "Server Start function. This controls how the skill works when it is starting to cast, on the server side. This uses a code value to call a function, affecting how certain fields are used. Parameters Code 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 calc1 calc4 calc1 calc2 calc3 calc4 aurarangecalc calc1 calc3 calc1 calc1 calc4 srvmissilea calc2 aurarangecalc calc1 calc4 calc1 aurastate aurastat1 srvmissilea srvmissileb srvmissilec Param4 Param8 aurastate aurastat1 srvmissilea srvmissileb srvmissilec auralencalc calc1 calc4 calc2 aurastate calc1 Description Do nothing"
    },
    {
      "name": "StartAttack",
      "description": "Check that the attack is melee or ranged. If the attack is ranged, then verify the ammunition."
    },
    {
      "name": "StartKick",
      "description": "Calculate the damage and attack the target unit with a Hand-To-Hand hit class."
    },
    {
      "name": "StartUnsummon",
      "description": "Validate that the target unit is not a monster or player and that the unit is owned by the caster unit. Check that the pet can be unsummoned (See “unsummon” in pettype.txt)"
    },
    {
      "name": "AmaStartCheckQuantity",
      "description": "Verify that the caster unit has enough weapon ammunition"
    },
    {
      "name": "AmaStartJab",
      "description": "Return true."
    },
    {
      "name": "AmaStartPowerStrike",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "AmaStartImpale",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Use “calc2” to control the percent chance of losing weapon durability. Use “calc3” to control the flat amount of durability lost."
    },
    {
      "name": "AmaStartStrafe",
      "description": "Attempt to find nearby valid targets and shoot them. Use “aurarangecalc” to control the range to find targets. Use “calc1” and “calc3” to control the minimum and maximum amount of shots fired."
    },
    {
      "name": "AmaStartFend",
      "description": "Find a valid target to attack in melee and then perform multiple attacks to nearby enemies. Use “calc1” to control the max targets to attack."
    },
    {
      "name": "AmaStartLightningStrike",
      "description": "Validate the target enemy and attempt to attack it to deal a random amount of lightning damage. Use “calc1” to control the percentage increase for damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "SorStartInferno",
      "description": "Continuously create missiles while the caster has the “inferno” state, and adjust the animations and modes based on the inferno frames. Use “calc2” to control the monster channel duration."
    },
    {
      "name": "SorStartTelekinesis",
      "description": "Validate the range distance and the target type"
    },
    {
      "name": "SorStartThunderStorm",
      "description": "Validate the skill use and setup targeting parameters"
    },
    {
      "name": "SorStartHydra",
      "description": "Validate the target location"
    },
    {
      "name": "NecStartRaiseSkeleton",
      "description": "Check for a valid target corpse that can be raised"
    },
    {
      "name": "NecStartPoisonDagger",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "NecStartCorpseExplosion",
      "description": "Check for a valid target corpse that can explode"
    },
    {
      "name": "NecStartAttract",
      "description": "Return true"
    },
    {
      "name": "NecStartBonePrison",
      "description": "Validate that the target is an enemy and make sure that the target is not located in town"
    },
    {
      "name": "NecStartIronGolem",
      "description": "Validate that the target is an identified item located on the ground"
    },
    {
      "name": "NecStartRevive",
      "description": "Check for a valid target corpse that can be revived"
    },
    {
      "name": "AssStartPsychicHammer",
      "description": "Check for a valid target player or monster AssStartProgressiveAttack – Reset internal variable used for keeping track of skill steps."
    },
    {
      "name": "AssStartDragonTalon",
      "description": "Use “calc1” to control the number of attacks."
    },
    {
      "name": "AssStartDragonClaw",
      "description": "Reset internal variable used for keeping track of skill steps."
    },
    {
      "name": "AssStartBladeFury",
      "description": "Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. If the caster unit does not have the “inferno” state, then add it and handle the animation frames. If the caster unit does have the “inferno” state, then periodically create missiles."
    },
    {
      "name": "AssStartDragonTail",
      "description": "Validate the target to attack and calculate the kick damage. Use “Param4” to control the attack speed. Use “Param8” to control if the attack should always hit."
    },
    {
      "name": "AssStartBladeShield",
      "description": "Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Add the “aurastate” state that lasts a duration controlled by “auralencalc”."
    },
    {
      "name": "PalStartSacrifice",
      "description": "Validate the target enemy unit and determine if the caster unit can melee attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Do nothing"
    },
    {
      "name": "PalStartCharge",
      "description": "Validate the target enemy unit and determine if the caster unit can melee attack it. Adjust the caster unit’s movement speed. Do special adjustments for the “duriel” and “clawviper1” monster attack modes. Use “calc2” to add bonus movement speed percentage while charging."
    },
    {
      "name": "BarStartBash",
      "description": "Validate the target enemy and attack it. Use “calc1” to control the physical damage percent increase. Use “calc2” to control the flat damage increase. Use “calc3” to 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 calc2 calc3 calc4 calc1 calc2 calc3 calc1 aurastate auralencalc auraevent1 auraeventfunc1 auraevent2 auraeventfunc2 auraevent3 auraeventfunc3 aurastate calc1 calc2 calc4 aurarangecalc calc1 calc2 calc1 calc2 calc1 calc4 aurastate calc1 calc1 calc1 calc2 calc3 srvmissilea auraevent1 auraeventfunc1 auraevent2 auraeventfunc2 auraevent3 control the attack speed bonus. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Applies “aurastate” to self."
    },
    {
      "name": "BarStartFindHeart",
      "description": "Check for a valid target corpse that can spawn potions. This relies on the “soft” and “noSel” flags from the monstats2.txt file."
    },
    {
      "name": "BarStartFindItem",
      "description": "Check for a valid target corpse that can spawn items. This relies on the “soft” and “noSel” flags from the monstats2.txt file."
    },
    {
      "name": "PalStartVengeance",
      "description": "Validate the target enemy and attack it. Use the calculation fields to control fire, cold, and lightning damage percentages added to the attack."
    },
    {
      "name": "PalStartHolyShield",
      "description": "Check that the player has a shield equipped"
    },
    {
      "name": "AmaStartFend2",
      "description": "Find nearby enemy targets to melee attack. Use “calc1” to control the maximum number of targets to attack."
    },
    {
      "name": "BarStartWhirlwind",
      "description": "Stop any skills and validate the target location. Modify the caster unit’s collision to only collide with walls and objects and save the target location. Apply the “aurastate” state with the length controlled. Applies “auraevents” if they exist."
    },
    {
      "name": "BarStartBerserk",
      "description": "Validate the target enemy unit and determine if the caster unit can melee attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Use “calc2” to control the duration for how long the caster unit has the state."
    },
    {
      "name": "BarStartLeap",
      "description": "Adjust the caster unit collision, validate the target location, and store the location in a parameter. If the caster unit is in a monster, then handle how the monster can attack the target while leaping."
    },
    {
      "name": "BarStartLeapAttack",
      "description": "Adjust the caster unit collision, validate the target location, and store the location in a parameter. Make the caster unit uninterruptable after landing in order to melee attack a nearby target."
    },
    {
      "name": "MonStartFirehit",
      "description": "If the caster unit is a player, then use the BarStartBash function (Code 32). Otherwise make the caster attack the target while in “Skill 1” mode and deal damage"
    },
    {
      "name": "MonStartMagottEgg",
      "description": "Make the unit unattackable, unselectable, and unable to be hit by missiles"
    },
    {
      "name": "MonStartMaggotUp",
      "description": "Set the unit to have ground collision and adjust the collision and pathing. Teleport the unit to a viable location in the area."
    },
    {
      "name": "MonStartMaggotDown",
      "description": "Make the unit unattackable, unselectable, and unable to be hit by missiles. Adjust the unit’s collision to not have pathing."
    },
    {
      "name": "MonStartAndariel",
      "description": "Validate the target unit and store the target’s location in a parameter"
    },
    {
      "name": "MonStartJump",
      "description": "Validate the target location. Return false if the caster unit has the “freeze” state. Use the “calc1” field to control the damage percent bonus. Make the caster unit attack the target, if possible."
    },
    {
      "name": "MonStartSwarmMove",
      "description": "Find and validate a path to the target."
    },
    {
      "name": "MonStartNest",
      "description": "Validate the caster unit’s location and modify its collision"
    },
    {
      "name": "MonStartQuickStrike",
      "description": "Validate the target unit and attack it"
    },
    {
      "name": "MonStartSubmerge",
      "description": "Make the unit unattackable, unselectable, and unable to be hit by missiles"
    },
    {
      "name": "MonStartEmerge",
      "description": "Make the unit unattackable, unselectable, and unable to be hit by missiles"
    },
    {
      "name": "MonStartDiabLight",
      "description": "Add the “inferno” state to the caster unit. Use “calc2” to control the number of frames to add to the animation while channeling and save it in a parameter."
    },
    {
      "name": "MonStartDiabRun",
      "description": "Validate the target unit and save its location in parameters"
    },
    {
      "name": "MonStartMosquito",
      "description": "Validate the target unit and use the calculation fields to control the minimum and maximum number of animation loops for the skill."
    },
    {
      "name": "DruStartChargeUpAttack",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "DruStartRabies",
      "description": "Validate the “aurastate” state. Reset internal variables used to keep track of hits."
    },
    {
      "name": "DruStartFireClaws",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the percentage increase for physical damage dealt."
    },
    {
      "name": "MonStartImpInferno",
      "description": "Add the “inferno” state to the caster unit. Use “calc1” to control the number of frames to add to the animation while channeling and save it in a parameter."
    },
    {
      "name": "MonStartBatSuckBlood",
      "description": "Validate the target enemy and attempt to attack it. Use “calc1” to control the damage penalty percentage. Use “calc2” to control the life steal percent. Use “calc3” to control the mana steal percent."
    },
    {
      "name": "MonStartSelfResurrect",
      "description": "Validate that the caster unit is a monster, then resurrect the monster, making it have proper pathing, be attackable, selectable, and able to be hit by missiles."
    },
    {
      "name": "MonStartSpawner",
      "description": "Save the monster’s position, class, and mode as parameters"
    },
    {
      "name": "MonStartCorpseCycler",
      "description": "Validate that the caster unit is a monster. Check for the “noSel” state on the target (see monstats2.txt) or add it on the target. Create the missile at the target location and corpse explode the corpse on the client."
    },
    {
      "name": "MonStartFrenzy",
      "description": "Validate that the target is an enemy. Reset internal variables used to keep track of frames and attacks."
    },
    {
      "name": "StartThrow",
      "description": "Validate that the caster unit has enough ammunition and durability"
    },
    {
      "name": "ApplyPassiveAuraEvents",
      "description": "Check each of the aura events on the skill and apply the event handler to use the aura event functions auraeventfunc3 67 68 calc2"
    },
    {
      "name": "BarStartFrenzy",
      "description": "Resets internal variables used to keep track of frames and attacks."
    },
    {
      "name": "BarStartDoubleSwing",
      "description": "Uses “calc2” to apply an attack rate bonus."
    },
    {
      "name": "srvdofunc",
      "description": "Server Do function. This controls how the skill works when it finishes being cast, on the server side. This uses a code value to call a function, affecting how certain fields are used. Parameters Code 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 srvoverlay aurastate auratargetstate auralencalc auratargetstate auralencalc aurarangecalc calc1 calc4 srvmissilea srvmissileb calc1 calc2 calc3 calc5 aurastate auralencalc calc1 calc4 srvmissilea srvmissileb calc1 aurastate aurastat1 srvmissilea srvmissileb srvmissilec calc1 aurarangecalc srvmissilea srvmissileb calc2 Param6 calc1 calc4 Param2 aurastate aurastat1 srvmissilea srvmissileb srvmissilec calc1 calc2 pettype calc2 calc3 pettype calc1 calc2 aurastate aurastat1 srvmissilea srvmissileb srvmissilec calc1 aurastate auralencalc srvmissilea calc1 aurarangecalc calc1 calc2 Description Do nothing"
    },
    {
      "name": "DoAttack",
      "description": "If using a ranged weapon, then launch the weapon’s missile. Otherwise, perform a standard melee attack to deal damage."
    },
    {
      "name": "DoApplyDamage",
      "description": "Apply the overlay on the target unit when dealing damage. Apply the “auratargetstate” state on the target, if possible, with “auralencalc” controlling its duration. Apply the “aurastate” state on the caster unit, if possible."
    },
    {
      "name": "DoThrow",
      "description": "Check that primary equipped weapon is a throwing weapon and handle launching the weapon’s missile"
    },
    {
      "name": "DoUnsummon",
      "description": "Remove the pet from the caster owner"
    },
    {
      "name": "DoLeftThrow",
      "description": "Check that non-primary equipped weapon is a throwing weapon and handle launching the weapon’s missile"
    },
    {
      "name": "AmaDoInnerSight",
      "description": "Apply the “auratargetstate” state to all units in the area with a radius controlled by “aurarangecalc”, that lasts a duration controlled by “auralencalc”. The state can use any of the aura stats and their related calculation values."
    },
    {
      "name": "AmaDoJab",
      "description": "Attempt to attack the target unit. Use “calc1” to control the percent increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "AmaDoMultipleShot",
      "description": "Shoot a number of missiles toward a target location. If the weapon class is a bow then use “srvmissilea”, otherwise use “srvmissileb” as the missile to create. Use “calc1” to control the number of missiles created. Use “calc2” to control the activation frame for each missile created. Use “calc3” to control the number of triggering missiles. Use the \"calc5\" value to calculate Guided Arrow synergy."
    },
    {
      "name": "BarDoFrenzy",
      "description": "Attack with both weapons on a target or to nearby targets. Add the “aurastate” state to the caster unit, with a duration controlled by “auralencalc”. Use “calc1” to control the percentage increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "AmaDoGuidedArrow",
      "description": "Shoot a missile that will change its path to find a nearby target to hit. If the weapon class is a bow then use “srvmissilea”, otherwise use “srvmissileb” as the missile to create. Use “calc1” to control the physical damage dealt by the missile."
    },
    {
      "name": "AmaDoChargedStrike",
      "description": "Create the number of missiles with randomized pathing. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "AmaDoStrafe",
      "description": "Use “aurarangecalc” to control the range to find a target. If the weapon class is a bow then use “srvmissilea”, otherwise use “srvmissileb” as the missile to create. Use “calc2” to control the percent increase for physical damage dealt. Use “Param6” to control what percent within the entire animation to trigger rolling back the loop within the animation."
    },
    {
      "name": "AmaDoFend",
      "description": "Attempt to attack the target unit or nearby enemies with multiple attacks. Use “calc1” to control the percent increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Use “Param2” to control what percent within the entire animation to trigger rolling back the loop within the animation."
    },
    {
      "name": "AmaDoLightningStrike",
      "description": "Damage the target and create a missile that bounces to different targets. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “calc1” to control the range of the missile to find a nearby target. Use “calc2” top control the number target chain jump hits for the missile."
    },
    {
      "name": "AmaDoDopplezon",
      "description": "Create a pet unit that is a duplicate of the caster unit. Use “calc1” to control the life percent of the pet. Use “calc3” to control the Life percent increase on the pet unit based on the caster’s Life. Use “calc2” to control the duration that the pet exists. Apply the “dopllezon_appear” overlay on the pet."
    },
    {
      "name": "AmaDoValkyrie",
      "description": "Create a pet unit with generated item equipment and stats. Use “calc1” to control the life percent of the pet. Use “calc2” to control the item level for the generated items on the pet."
    },
    {
      "name": "SorDoChargedBolt",
      "description": "Create a number of missiles that have a randomized path. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "SorDoFrozenArmor",
      "description": "Apply the state on the target unit with its length controlled by “auralencalc”."
    },
    {
      "name": "SorDoInferno",
      "description": "Create the missile where “calc1” controls the range. Continue creating missiles while having the “inferno” state."
    },
    {
      "name": "SorDoStaticField",
      "description": "Apply damage to all units in the area. Use “aurarangecalc” to control the damage radius. Use “calc1” to control the Life percent damage. Use “calc2” to control the minimum damage dealt. 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 calc1 aurastate aurastat1 srvmissilea srvmissileb srvmissilec calc1 aurastate auralencalc srvmissilea srvmissileb calc1 aurastate auralencalc srvmissilea calc1 srvmissilea aurastate auralencalc srvmissilea Param7 auratargetstate aurarangecalc auralencalc pettype calc1 calc2 calc1 calc2 calc3 calc4 aurastate auralencalc aurastat1 aurastat2 aurastatcalc2 aurastate auralencalc aurastat1 aurastat2 aurastatcalc2 aurastate aurastat1 srvmissilea srvmissileb srvmissilec calc1 aurastate aurarangecalc aurastat1 srvmissilea srvmissileb srvmissilec aurastate aurarangecalc aurastat1 aurastate aurarangecalc aurastat1 srvmissilea srvmissileb srvmissilec aurastate aurastat1 srvmissilea srvmissileb srvmissilec aurastate aurarangecalc aurastat1 srvmissilea srvmissileb srvmissilec calc2 calc3 calc4"
    },
    {
      "name": "SorDoTelekinesis",
      "description": "If the target is a monster or player, then deal damage and use “calc1” to control the knockback chance. If the target is an item, then ensure that the item type is a scroll, gold, or potion. If the target is a object, then call the object’s operate function."
    },
    {
      "name": "SorDoFrostNova",
      "description": "Shoot missiles in a circular array. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “calc1” to add to the velocity of the missiles created."
    },
    {
      "name": "SorDoBlaze",
      "description": "Add the “aurastate” state on the caster with a duration controlled by “auralencalc”. Apply any aura stats or events."
    },
    {
      "name": "SorDoFirewall",
      "description": "Create 2 “srvmissilea” missiles in opposite directions and create 2 “srvmissileb” missiles also at those locations. Use “calc1” to control how many different groups of these missiles can exist at once."
    },
    {
      "name": "SorDoEnchant",
      "description": "Add the “aurastate” state on the target with a duration controlled by “auralencalc”. Apply any aura stats or events."
    },
    {
      "name": "SorDoChainLightning",
      "description": "Create the missile, which can jump off targets hit, where “calc1” controls the number of missile chain jump hits"
    },
    {
      "name": "SorDoTeleport",
      "description": "Check that the level allows teleporting (see “Teleport” in Levels.txt), then validate the target location and warp the unit to that location."
    },
    {
      "name": "SorDoMeteor",
      "description": "Check that the target location is valid to spawn the missile, then create it"
    },
    {
      "name": "SorDoThunderStorm",
      "description": "While the caster unit has the “aurastate” state with the “auralencalc” duration, find nearby a nearby enemy and shoot the missile. Use “Param7” to control the radius size for finding nearby enemies."
    },
    {
      "name": "NecDoAmplifyDamage",
      "description": "Apply the “auratargetstate” state on enemies in an area where “aurarangecalc” controls the radius and “auralencalc” controls the duration. Also apply and aura stats, events, and filters."
    },
    {
      "name": "NecDoRaiseSkeleton",
      "description": "Validate the target corpse and then create a pet unit. Use “calc1” to control the life percent of the pet. Use “calc2” to control the percent chance to spawn the skeleton with a shield (only works for the “necroskeleton” monster)."
    },
    {
      "name": "NecDoApplyDamage",
      "description": "Validate the target enemy and perform damage from the attacker"
    },
    {
      "name": "AssDoPsychicHammer",
      "description": "Validate that the target unit is a monster or player and is not in town. Use the calculation fields to control the chance to knockback the target if it is a monster, unique monster, boss, or player, respectively."
    },
    {
      "name": "AssDoProgressiveAttack",
      "description": "Attempt to attack the target unit and deal damage. Calculate the progressive damage. Use “auralencalc” to determine the length of the charges. Use “aurastat1” to control the progressive charges. Use “aurastat2” as a stat when the player attacks and has no charges. Use “aurastatcalc2” to control that stat’s value."
    },
    {
      "name": "AssDoDualProgressiveAttack",
      "description": "Check that the player has 2 weapons equipped. Attempt to attack the target unit twice with a frame delay, and use the “AssDoProgressiveAttack” (Code = 34) function for each attack."
    },
    {
      "name": "ApplyClawsOfThunderLvl2",
      "description": "Shoot missiles in a circular array. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “calc1” to add to the velocity of the missiles created."
    },
    {
      "name": "ApplyClawsOfThunderLvl3",
      "description": "Shoot missiles in an arc array. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “aurarangecalc” to control how many missiles are created, only if there are no values from the progressive charge calculation fields (see “prgcalc1”)"
    },
    {
      "name": "AssDoAreaDamage",
      "description": "Deal damage to enemies in an area at a target location. Use the progressive calculation fields to determine the radius increase per charge, controlled by the “aurastate” state and the “aurastat1” value, otherwise use “aurarangecalc” for the radius."
    },
    {
      "name": "AssMissileDisc",
      "description": "Create a disc of randomly positioned missiles. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use the progressive calculation fields to determine the radius increase per charge, controlled by the “aurastate” state and the “aurastat1” value, otherwise use “aurarangecalc” for the radius."
    },
    {
      "name": "ApplyRoyalStrikeLvl1",
      "description": "Create a missile at a target location. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields."
    },
    {
      "name": "ApplyChaosIce",
      "description": "Create multiple missiles from the caster unit. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use the progressive calculation fields to determine the number of missiles created per charge, controlled by the “aurastate” state and the “aurastat1” value. Use “aurarangecalc” for the radius."
    },
    {
      "name": "AssDoDragonTalon",
      "description": "Attempt to melee attack the target unit multiple times. Use the progressive fields to control the charge functions. Use each calculation field to control the 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 Param1 Param2 aurastate aurarangecalc aurastat1 srvmissilea srvmissileb srvmissilec pettype pettype calc1 calc4 aurastate auratargetstate auralencalc aurarangecalc aurastate aurastat1 srvmissilea srvmissileb srvmissilec pettype Param5 Param6 aurarangecalc calc1 aurarangecalc calc1 calc2 Param4 calc1 aurastate aurarangecalc aurastat1 aurastate aurarangecalc aurastat1 aurarangecalc calc1 calc2 calc3 EType pettype pettype pettype auratargetstate auralencalc aurarangecalc aurastat1 pettype calc2 srvmissilea auratargetstate auralencalc aurarangecalc aurastat1 pettype srvmissilea calc2 Param4 aurastate auratargetstate aurarangecalc aurastate auratargetstate aurarangecalc calc1 calc4 aurastate auralencalc percent chance to knockback for a monster, boss, or player unit. Use the parameters to control a linear calculation for the percentage of bonus physical damage dealt."
    },
    {
      "name": "AssDoShockField",
      "description": "Create multiple missiles using the lob function. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use the progressive calculation fields to determine the number of missiles created per charge, controlled by the “aurastate” state and the “aurastat1” value. Use “aurarangecalc” for the radius."
    },
    {
      "name": "AssDoBladeSentinel",
      "description": "Summon a pet at the target location and cause it to oscillate"
    },
    {
      "name": "AssDoWakeOfFireSentry",
      "description": "Summon a pet at the target location"
    },
    {
      "name": "AssDoDragonClaw",
      "description": "Attempt to attack the target unit twice with a frame delay. Use “calc1” to control the percent increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. Use the progressive fields to determine progressive damage changes."
    },
    {
      "name": "AssDoCloakOfShadows",
      "description": "Apply the “aurastate” state on the caster unit with a duration controlled by “auralencalc”. Apply the “auratargetstate” state on nearby enemies in a radius controlled by “aurarangecalc”. Use any applicable aura stats or filters."
    },
    {
      "name": "AssDoBladeFury",
      "description": "Create a missile after a frame delay. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use the progressive calculation fields to modify the delay between creating the next missile, based on the charges."
    },
    {
      "name": "AssDoShadowWarrior",
      "description": "Create a pet unit with generated item equipment and stats. Use “Param5” and “Param6” to control the item level for the generated items on the pet."
    },
    {
      "name": "AssDoDragonTail",
      "description": "Attempt to attack a target unit and deal damage in an area. Use the progressive fields to control the charge functions. Use “aurarangecalc” to control the radius. Use “calc1” to control the percent increase in damage dealt."
    },
    {
      "name": "AssDoMindBlast",
      "description": "Randomly damage and convert enemies in an area. Use “aurarangecalc” to control the radius, or if using the progressive charges, then use their field values instead. Use “calc1” to control the chance to convert enemies. Use “calc2” to control the duration enemies are converted. Use “Param4” to add an additional randomized duration value."
    },
    {
      "name": "AssDoDragonFlight",
      "description": "Teleport the caster to the target unit and attempt to attack it. Use the progressive fields to control the charge functions. Use “calc1” to control the percent increase for physical damage dealt."
    },
    {
      "name": "AssDoAreaDamage2",
      "description": "Deal damage to enemies in an area around the caster. Use the progressive calculation fields to determine the radius increase per charge, controlled by the “aurastate” state and the “aurastat1” value, otherwise use “aurarangecalc” for the radius."
    },
    {
      "name": "AssDoBladeShield",
      "description": "Deal damage to enemies in an area around the caster. Use the progressive calculation fields to determine the radius increase per charge, controlled by the “aurastate” state and the “aurastat1” value, otherwise use “aurarangecalc” for the radius."
    },
    {
      "name": "NecDoCorpseExplosion",
      "description": "Hide the target corpse and deal damage in an area. Use “aurarangecalc” to control the radius. Use “calc1” and “calc2” to control the min and max percent damage dealt based on the max Life from the corpse unit. Use “calc3” to control the percent of damage converted to elemental."
    },
    {
      "name": "NecCreateGolem",
      "description": "Create a pet unit with defined stats. If the skill has the “TargetableOnly” and “TargetCorpse” flag enabled, then the summoned pet will copy the modifiers of the corpse."
    },
    {
      "name": "NecCreateIronGolem",
      "description": "Validate that the target is an identified item on the ground. Remove the item and create the pet, inheriting properties from the item."
    },
    {
      "name": "NecDoRevive",
      "description": "Validate that the target is a corpse that can be revived, then revive the monster, applying any valid stats"
    },
    {
      "name": "NecDoAttract",
      "description": "Validate that the target is a monster and can have its AI changed. Apply the “auratargetstate” state on any valid monsters in an area controlled by “aurarangecalc” which lasts a duration controlled by “auralencalc”."
    },
    {
      "name": "NecDoBoneWall",
      "description": "Create the pet, and then create 2 missiles that shoot in opposite directions, where “calc2” controls the number of sub missiles to create within each of these missile parameters."
    },
    {
      "name": "NecDoConfuse",
      "description": "Validate that the target is a monster and can have its AI changed. Apply the “auratargetstate” state on any valid monsters in an area controlled by “aurarangecalc” which lasts a duration controlled by “auralencalc”."
    },
    {
      "name": "NecDoBonePrison",
      "description": "Create a number of pets around the target unit."
    },
    {
      "name": "NecDoPoisonExplosion",
      "description": "Validate that the target corpse can explode, then update the corpse to be unselectable and create a radial ring of poison missiles."
    },
    {
      "name": "PalDoSacrifice",
      "description": "Attack and deal damage to the target. Deal damage to the caster based on a percentage of life controlled by “calc2” and “Param4”."
    },
    {
      "name": "PalDoMight",
      "description": "Apply the aurastate” state to the caster. Apply the “auratargetstate” state to nearby units, where “aurarangecalc” controls the radius size."
    },
    {
      "name": "PalDoHolyFire",
      "description": "Apply the aurastate” state to the caster. Apply the “auratargetstate” state to nearby units, where “aurarangecalc” controls the radius size. Deal damage to the nearby units in the area."
    },
    {
      "name": "PalDoCharge",
      "description": "Listen for the event frames and attempt to attack the target unit to deal damage. Use “calc1” to control the percent increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "BarDoBattleCry",
      "description": "Create a circular array of missiles and add the “aurastate” state to the caster unit where the duration is controlled by “auralencalc” 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 srvmissilea calc1 Param3 Param4 aurastate calc1 calc2 calc3 calc4 auratargetstate auralencalc calc1 Param1 Param2 Param3 Param4 srvmissilea calc1 calc1 srvmissilea srvmissileb srvmissilec aurastate calc1 calc1 calc2 calc1 calc2 calc4 auratargetstate auralencalc calc1 Param5 srvmissilea srvoverlay aurastate auratargetstate aurarangecalc aurastate aurarangecalc calc1 calc2 calc3 calc1 srvmissilea calc1 srvmissilea calc1 calc2 sumoverlay srvmissilea srvmissilea srvmissilea calc1 calc3 calc1 calc2 srvoverlay"
    },
    {
      "name": "BarDoFindHeart",
      "description": "Validate the target corpse, then update the corpse to be unselectable and roll a random chance to create a potion. Use “calc1” to control the chance of finding a potion. Use “Param3” and “Param4” to control the chance for finding a mana potion and rejuvenation potion. Potions depend on the current Act level and Game Difficulty."
    },
    {
      "name": "BarDoDoubleSwing",
      "description": "Validate the target enemy and attack it based on the animation sequence frame to determine if it is the first attack or second attack. Uses the BarStartBash function (Code 32 for “srvstfunc”)."
    },
    {
      "name": "BarDoTaunt",
      "description": "Validate that the target is a monster and can have its AI changed to force it to attack the caster. Apply the “auratargetstate” state on the target, which lasts a duration controlled by “auralencalc”. If there is no target selected, then find the nearest target within a radius value of 20."
    },
    {
      "name": "BarDoFindItem",
      "description": "Validate the target corpse, then update the corpse to be unselectable and roll a random chance to spawn a treasure class item. Use “calc1” to control the chance of finding an item. Use the parameter values to control the chances for finding Low Quality, Normal, High Quality, and Magic items."
    },
    {
      "name": "PalDoBlessedHammer",
      "description": "Create a missile in a spiral path pattern. Use “calc1” to control the damage percent bonus when the caster has the “concentration” state."
    },
    {
      "name": "BarDoDoubleThrow",
      "description": "Launch the weapon missile, where “calc1” controls the bonus damage percent"
    },
    {
      "name": "BarDoGrimWard",
      "description": "Validate the target corpse, then update the corpse to be unselectable and create the “srvmissilea” missile. If the target unit has the “large” flag enabled (see monstats2.txt) then use “srvmissileb” instead. If the target unit has the “small” flag enabled (see monstats2.txt) then use “srvmissilec” instead."
    },
    {
      "name": "BarDoWhirlwind",
      "description": "If the caster unit is at the target location, then remove the aura and stop whirlwinding. Otherwise, find nearby enemies and deal damage, where “calc1” controls the damage bonus."
    },
    {
      "name": "BarDoLeap",
      "description": "Validate the target position and caster’s collision, and move the unit. Use “calc1” to control the range, and “calc2” to control the speed."
    },
    {
      "name": "BarDoLeapAttack",
      "description": "Validate the target position and the caster’s collision, and move the unit. Make the unit attack the target, if nearby, or find another nearby target. Use “calc2” to control the speed. Use “calc1” to control the percent increase for physical damage dealt. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used."
    },
    {
      "name": "PalDoConversion",
      "description": "Validate that the target is a monster and can have its AI changed to fight alongside the player. Apply the “auratargetstate” state on the target, which lasts a duration controlled by “auralencalc”. Use “calc1” to control the chance to convert. Use “Param5” to enable a expire effect."
    },
    {
      "name": "PalDoFistOfTheHeavens",
      "description": "Create the missile and apply the overlay on the target unit"
    },
    {
      "name": "PalDoHolyFreeze",
      "description": "Apply the “aurastate” state on the caster, and apply the “auratargetstate” on any nearby enemies with a radius controlled by “aurarangecalc”."
    },
    {
      "name": "PalDoRedemption",
      "description": "Apply the “aurastate” state on the caster. Use “aurarangecalc” to control the radius of the aura, which will look for valid corpses to redeem. Use “calc1” to control the chance to redeem. Use “calc2” to control the life gain. Use “calc3” to control the mana gain."
    },
    {
      "name": "MonDoFirehit",
      "description": "Apply damage to the target"
    },
    {
      "name": "MonDoMaggotEgg",
      "description": "Spawn a number of units around the caster and kill the caster. Use “calc1” to control the number of spawned units."
    },
    {
      "name": "MonDoShamanFire",
      "description": "Get the missile and possibly add the monster’s number in class to the missile ID to get another missile ID instead, and then fire that missile"
    },
    {
      "name": "MonDoMaggotDown",
      "description": "Check for the proper frame count and then heal the caster by a percentage of Life controlled by “calc1”"
    },
    {
      "name": "MonDoMaggotLay",
      "description": "Spawn a unit in 1 of 8 possible directions nearby the target location"
    },
    {
      "name": "MonDoAndariel",
      "description": "For multiple frames, spawn a missile in 1 of 8 possible directions"
    },
    {
      "name": "MonDoJump",
      "description": "Validate the target path and check for the completion of the animation or the arrival to destination, then update the unit’s collision. Handle special cases for the “sandleaper1” monster frame counts."
    },
    {
      "name": "MonDoSwarmMove",
      "description": "Check for the skill flag to stop the sequence, otherwise reset the sequence. Use “calc1” to control the animation starting frame at the beginning of the sequence. Use “calc2” to control the animation frame when ending the sequence."
    },
    {
      "name": "MonDoNest",
      "description": "Make the caster unit interruptable. Create the monster saved in the function parameter and make that monster unable to reward Experience and Item Drops, and add the overlay on that monster."
    },
    {
      "name": "MonDoQuickStrike",
      "description": "Apply damage to the target. Check for the monster’s missile frame and then launch the missile."
    },
    {
      "name": "MonDoGargoyleTrap",
      "description": "Create the missile in one of the allowed directions that is closest to the target unit"
    },
    {
      "name": "MonDoSubmerge",
      "description": "When on the last frame, set the animation sequence rate to 0 and clear the frame events"
    },
    {
      "name": "MonDoMonsterInferno",
      "description": "Continuously create missiles based on the monster’s Inferno fields (See monstats2.txt). Use “calc1” to adjust the missile range. Use “calc3” to adjust the density when to create the next missile."
    },
    {
      "name": "MonDoZakarumHeal",
      "description": "Heal the ally target by a random percentage of the target’s life, where “calc1” controls the min percent and “calc2” controls the max percent"
    },
    {
      "name": "MonDoResurrect",
      "description": "Validate that the monster is dead and can be resurrected. Make the monster have proper collision, be attackable, be selectable, able to be hit by missiles, not 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 provide experience, and not provide item drops. Also update the monster’s mode and add an overlay."
    },
    {
      "name": "MonDoTeleport",
      "description": "Validate the target location and teleport the unit. Adjust the location if the monster has a boss owner."
    },
    {
      "name": "MonDoPrimePoisonNova",
      "description": "Create 2 rings of missiles. Use “calc1” to control the number of missile subloops. Use “calc2” to control how many missiles are created per ring. Use the missile’s “Param1” and “Param2” values to control its velocity per ring (See Missiles.txt)."
    },
    {
      "name": "MonDoDiabCold",
      "description": "Deal elemental damage to the target and apply the overlay. Adjust the Freeze Length using the “ELen” fields from the skill."
    },
    {
      "name": "MonDoFingerMageSpider",
      "description": "Create the missile with a facing opposite of the target or caster unit, and use “calc1” to control the missile’s subloops."
    },
    {
      "name": "MonDiabWallMaker",
      "description": "Create a number of missiles with a randomized path and range. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "MonDoDiabRun",
      "description": "Move the caster unit with increased speed towards a target, and then attack the target, dealing damage. Use “calc1” to control the increase in movement speed. The 6 parameter values controls the run animation’s stop frame length, stop event frame, start event frame, start frame length, loop repeat event frame, loop frame length, and loop start event frame."
    },
    {
      "name": "MonDoDiabPrison",
      "description": "Create multiple of the “summon” units around the target, based on the type of unit that is being targeted"
    },
    {
      "name": "MonDoDesertTurret",
      "description": "Create a number of missiles in 8 possible directions. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "MonDoArcaneTower",
      "description": "Create a circular array of missiles"
    },
    {
      "name": "MonDoMosquito",
      "description": "Validate that the caster is in melee range for the target and then deal damage, including randomized poison damage, mana drain, and stamina drain. Use “calc3” to control the heal percentage on the caster based on the damage dealt. Use “Param1” to control the animation frame to start the repeat loop."
    },
    {
      "name": "MonDoRegurgitatorEat",
      "description": "Validate that the target corpse is a monster and then remove it and heal the caster by a percentage of the target’s life, controlled by “calc1”"
    },
    {
      "name": "MonDoFrenzy",
      "description": "Attempt to attack the target unit, dealing damage. Add the “aurastate” state to the caster unit, with a duration controlled by “auralencalc”. Use “calc1” to control the percentage increase for physical damage dealt."
    },
    {
      "name": "MonDoHireFireMissile",
      "description": "Launch the weapon missile to the target. Use “srvmissilea” if the weapon missile is “arrow” or “bolt”."
    },
    {
      "name": "MonDoFetishAura",
      "description": "Apply an aura to nearby “fetish1” or “fetishblow1” monster types, increasing their attack rate. Use “Param4” to control the radius."
    },
    {
      "name": "MonDoCurse",
      "description": "Apply a random curse to enemy units in an area. Randomly select between the following curses: Amplify Damage, Weaken, Life Tap, Decrepify, Lower Resist. Use “aurarangecalc” to control the radius. Use “auralencalc” to control the duration. Use “Param5” and “Param6” to control the resistance percentage change for the Lower Resist curse. Use “Param7” to control the Decrepify attack speed and movement speed change."
    },
    {
      "name": "ItemDoBookSkill",
      "description": "Check the caster’s inventory for an item that has the “Book” or “Scroll” Item Type (See ItemTypes.txt), and then use that item’s skill and update its quantity."
    },
    {
      "name": "DruDoRaven",
      "description": "Create the pet unit and make it unattackable. Use “calc1” to control the pet’s bonus Life percent. Use “calc2” to control the summoned pet’s unit level."
    },
    {
      "name": "DruCreateVineCreature",
      "description": "Create the pet unit in the “Skill 1” mode. Use “calc1” to control the pet’s bonus Life percent. Use “calc2” to control the summoned pet’s unit level."
    },
    {
      "name": "DruDoWerewolf",
      "description": "Add/Remove the “aurastate” state on the caster, depending if the caster unit does or does not have the state. Use “auralencalc” to control the state duration. Use “Param12” to control whether you should be able to shift directly to a form without first going back to human form using “1” to allow and “0” to not allow."
    },
    {
      "name": "DruDoFireStorm",
      "description": "Create a number of missiles that move in a randomized pattern. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "DruDoTwister",
      "description": "Create a number of missiles that move in a randomized pattern. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "DruCreateTotem",
      "description": "Create the pet unit at a valid target location. Use “calc1” to control the pet’s bonus Life percent. Use “calc2” to control the summoned pet’s unit level."
    },
    {
      "name": "DruDoFeralRage",
      "description": "After hitting the target, apply the state on the caster unit with a duration controlled by “auralencalc” and with the capability to stack with charges. Use “calc2” to control the max charges."
    },
    {
      "name": "DruDoRabies",
      "description": "Attack the target to deal damage. Apply the “auratargetstate” where its duration is controlled by the “ELen” field. Use “calc1” to control the percent increase in physical damage."
    },
    {
      "name": "DruDoHunger",
      "description": "Attempt to attack the target, dealing damage and restoring Life and Mana. Use Use “calc1” to control the percent change in physical damage. Use “calc2” and “calc3” to control the life steal and mana steal gained from the attack damage."
    },
    {
      "name": "DruDoVolcano",
      "description": "Validate the target location and then create the missile"
    },
    {
      "name": "DruDoArmageddon",
      "description": "Apply the “aurastate” state on the caster unit which lasts a duration controlled by “auralencalc”. Use “Param4” to control the duration between sending an event state update."
    },
    {
      "name": "MonDoWakeOfFire",
      "description": "Create a missile from the source unit with a saved direction"
    },
    {
      "name": "MonDoImpInferno",
      "description": "Based on the animation frames set in monstats2.txt, create a missile where “calc2” controls the missile’s range (and also “Param1” from Missiles.txt). srvmissilea calc1 calc2 srvoverlay srvmissilea calc1 srvmissilea calc1 calc1 Param1 Param2 Param3 Param4 Param5 Param6 summon srvmissilea calc1 srvmissilea calc3 Param1 calc1 aurastate auralencalc calc1 srvmissilea Param4 auratargetstate aurarangecalc auaralencalc Param5 Param6 Param7 pettype calc1 calc2 pettype calc1 calc2 aurastate auralencalc Param12 srvmissilea calc1 srvmissilea calc1 pettype calc1 calc2 aurastate auralencalc calc2 auratargetstate calc1 calc1 calc2 calc3 srvmissilea aurastate auralencalc Param4 srvmissilea srvmissilea calc2 Param2 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 calc1 calc1 srvoverlay aurastate srvmissilea calc1 auratargetstate calc1 srvmissilea srvmissilea aurarangecalc sumoverlay srvmissilea calc1 aurastate srvmissilea calc1 calc2 srvmissilea aurarangecalc calc1 calc2 calc3 EType Param5 Param6 prgcalc1 prgcalc2 prgcalc3 aurastate aurastat1 aurarangecalc prgcalc1 prgcalc2 prgcalc3 aurastate aurastat1 srvmissilea srvmissileb srvmissilec pettype calc1 aurastate aurarangecalc Param4 aurastate aurarangecalc srvmissilea Param4 srvmissilea 149 srvmissilea 150 calc1 calc2 calc4"
    },
    {
      "name": "MonDoBatSuckBlood",
      "description": "Deal damage to the target and then use “calc1” to control the percentage of max Life healed on the caster unit"
    },
    {
      "name": "MonDoCryHelp",
      "description": "If the caster is a monster, then command the caster to attack the target for a duration controlled by “calc1”. Apply the overlay on the target."
    },
    {
      "name": "MonDoImpTeleport",
      "description": "If the target location is on the ground, then warp the unit to that location. If the type of unit targeted is the “barricadetower” or “siegebeast1” and the caster unit type is “imp1”, then add the “attached” state to the caster unit, and update the AI, animation events, and stats to be not interactable."
    },
    {
      "name": "MonDoVineAttack",
      "description": "Create a number of missiles in a random spread pattern with 4 possible spread directions. Use “calc1” to control the number of missiles created."
    },
    {
      "name": "MonDoOverseerWhip",
      "description": "Validate that the target is a living monster. If the target unit type is “minion1”, then perform a random chance to bloodlust the target. Use “calc1” to control the percent chance to bloodlust the target, which will apply the “auratargetstate” state on the target. If bloodlust does not happen, then change the monster class and AI to the suicide minion."
    },
    {
      "name": "MonDoImpFireMissile",
      "description": "Based on the monster’s number in class, increment the index of the linked “srvmissilea” missile and then create that missile based on the index."
    },
    {
      "name": "MonDoImpregnate",
      "description": "Validate that the target is a friendly dead monster and that it does not have the “pregnant” state. Then add the “pregnant” state to the target and create a “painworm1” type monster."
    },
    {
      "name": "MonDoSiegeBeastStomp",
      "description": "Deal damage to nearby enemies in an aura where “aurarangecalc” controls the radius of the damage"
    },
    {
      "name": "MonDoSpawner",
      "description": "Create the monster saved in the parameter with the added overlay, with no experience provided, and with no item spawning."
    },
    {
      "name": "MonDoDeathMauler",
      "description": "Validate the target location and then create the missile with an animation rate controlled by “calc1”. The missile’s range is modified based on the distance from the caster."
    },
    {
      "name": "MonDoFenrisRage",
      "description": "Validate that the target is an enemy corpse that has not been used. Apply the state on the caster, adding any aura events on the caster."
    },
    {
      "name": "MonDoBaalInferno",
      "description": "Shoot multiple missiles from the caster unit to a target location. Use “calc1” to control the number of missiles created. Use “calc2” to control the range of the missiles. Check the inferno frame events for the monster (see monstats2.txt)."
    },
    {
      "name": "MonDoBaalCold",
      "description": "Validate the target location and then create the missile using the directions from the saved parameters."
    },
    {
      "name": "MonDoBaalTentacle",
      "description": "Based on the monster class of the caster, create a number of “baaltentacle1” summoned monsters randomly positioned in a location with a radius size of 9. Make sure these monsters do not provide exp or reward items."
    },
    {
      "name": "MonDoBaalCorpseExplosion",
      "description": "Find a nearby dead monster and then do the “NecDoCorpseExplosion” function (Code = 55) except where “Param5” and “Param6” control the baseline radius and radius increase per skill level."
    },
    {
      "name": "AssDoAreaAttack",
      "description": "Deal attack damage in an area. Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, use the proper “progcalc#” value to control the radius, based on the number of progressive charges. Otherwise, default to using “aurarangecalc” for the radius."
    },
    {
      "name": "ApplyRoyalStrikeLvl2",
      "description": "Create a number of missiles that move in a randomized pattern. Use the “srvmissilea” missile by default, or use 1 of the 3 missiles depending on the progressive charges controlled by the “aurastate” field and “aurastat1” fields. Use “aurarangecalc” value by default for the number of missiles created, or use the appropriate progressive calculation fields, based on the number of progressive charges."
    },
    {
      "name": "SorDoHydra",
      "description": "Validate the target location and create 3 pets, where “calc1” controls their duration and bonus life percent."
    },
    {
      "name": "DruApplyHurricane",
      "description": "Apply the state on the caster with the radius controlled by “aurarangecalc” and the frame state updates to deal radius damage controlled by “Param4”."
    },
    {
      "name": "DruApplyArmageddon",
      "description": "Update the state on the caster unit based on the events, and then create a missile in a radius controlled by “aurarangecalc” at a periodic frame interval controlled by “Param4”."
    },
    {
      "name": "MonApplyAttached",
      "description": "Get the source unit of the caster and update the caster’s pathing to follow the source unit, like a rider attached to its mount."
    },
    {
      "name": "MonDoDoomKnightMissile",
      "description": "Create the “srvmissilea” using either the lob function or the normal linear function, depending on the “lob” flag. Also select the missile or up to 3 index values higher, depending on the monster’s graphics variation for the “Special 3” component variation."
    },
    {
      "name": "MonDoNecroMageMissile",
      "description": "Create the “srvmissilea” using either the lob function or the normal linear function, depending on the “lob” flag. Also select the missile or up to 3 index values higher, depending on the monster’s graphics variation for the “Special 4” component variation."
    },
    {
      "name": "PalDoSmite",
      "description": "Validate the target enemy and that the target is in melee range, and then attempt to attack the target. Use “calc1” to control the percent increase for physical damage dealt. Use “calc2” to control the stun length. Use “calc4” to control the percent of damage converted to elemental, if the “Etype” field is used. 151 152 srvmissilea calc1 srvmissilea calc1 calc3"
    },
    {
      "name": "SorDoChainLightning2",
      "description": "Launch the missile that can do chain hits to other nearby enemies. Use “calc1” to control the number of chain hits."
    },
    {
      "name": "MonDoDiabloLight",
      "description": "Shoot a missile from the caster to the target location, adhering to the caster’s inferno animation frames (See monstats2.txt). Use “calc1” to control the missile range, otherwise default to using the missile’s “Param2” value calculated with its current level. Use “calc3” to control the periodic frame count for how often to create the missile."
    },
    {
      "name": "srvstopfunc",
      "description": "Server Stop function. This controls how the skill cleans up after ending. This uses a code value to call a function, affecting how certain fields are used. Code 0 1 Parameters aurastate Description Do nothing"
    },
    {
      "name": "BarStopWhirlwind",
      "description": "Handles changing the collision, pathing, and aura state of the caster."
    },
    {
      "name": "prgstack",
      "description": "Boolean Field. If equals 1, then all “srvprgfunc#” functions will execute, based on the current number of progressive charges. If equals 0, then only the relative “srvprogfunc#” function will execute, based on the current number of progressive charges."
    },
    {
      "name": "srvprgfunc1 (to srvprgfunc3)",
      "description": "Controls what Server Do function is used when executing the progressive skill with a charge number equal to 1, 2, and 3, respectively. This field uses the same functions as the “srvdofunc” field."
    },
    {
      "name": "prgcalc1 (to prgcalc3)",
      "description": "Calculation Field. Used as a possible parameter for calculating values when executing the progressive skill with a charge number equal to 1, 2, and 3, respectively."
    },
    {
      "name": "prgdam",
      "description": "Calls a function to modify the progressive damage dealt Code 0 1 2 3 4 Parameters aurastat1 calc1 tgtoverlay aurastat1 calc1 aurastat1 EType Param2 aurastat1 EType calc1 Param5 Description Do nothing"
    },
    {
      "name": "ModifyProgressiveDamage",
      "description": "Modify the percentage of the physical damage dealt and apply an overlay on the target"
    },
    {
      "name": "ModifyProgressiveSteal",
      "description": "Modify the percentage of the life steal and mana steal gained"
    },
    {
      "name": "ModifyProgressiveElemental",
      "description": "If the progressive damage elemental type equals Cold, then at 3 charges, modify the Freeze Length based on the Cold Length and a divisor (using Param2)"
    },
    {
      "name": "ModifyProgressiveElementalConvert",
      "description": "Convert a percentage of the physical damage dealt to elemental damage, based on the “calc1” field. If the elemental type equals Cold, then at 3 charges, modify the Freeze Length based on the Cold Length and a divisor (using Param5)"
    },
    {
      "name": "srvmissile",
      "description": "Used as a parameter for controlling what main missile is used for the server functions used (See “Missile” field in Missiles.txt)"
    },
    {
      "name": "decquant",
      "description": "Boolean Field. If equals 1, then the unit’s ammo quantity will be updated each time the skill’s Server Do function is called. If equals 0, then ignore this."
    },
    {
      "name": "lob",
      "description": "Boolean Field. If equals 1, then missiles created by the skill’s functions will use the missile lobbing function, which will cause the missile fly in an arc pattern. If equals 0, then missiles that are created will use the normal linear function."
    },
    {
      "name": "srvmissilea (to srvmissilec)",
      "description": "Used as a parameter for controlling what secondary missile is used for the server functions used (See “Missile” field in Missiles.txt)"
    },
    {
      "name": "useServerMissilesOnRemoteClients",
      "description": "Control new missile changes per player skill. Values of 1 will force enable it for that skill. Skills that have matching server/client missiles sets for the skill get auto enabled. Setting this to a value greater than 1 will force it to skip this auto enable logic. If equals 0, then ignore this. Note: this feature is disabled."
    },
    {
      "name": "srvoverlay",
      "description": "Creates an overlay on the target unit when the skill is used. This is a possible parameter used by various skill functions (See the “overlay” field in Overlay.txt)"
    },
    {
      "name": "aurafilter",
      "description": "Controls different flags that affect how the skill’s aura will affect the different types of units. Uses an integer value to check against different bit fields. For example, if the value equals 4354 (binary = 1000100000010) then that returns true for the 4096 (binary = 1000000000000), 256 (binary = 0000100000000), and 2 (binary = 0000000000010) bit field values. Bit Field Value 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 Binary Equivalent Value 00000000000000000001 00000000000000000010 00000000000000000100 00000000000000001000 00000000000000010000 00000000000000100000 00000000000001000000 00000000000010000000 00000000000100000000 00000000001000000000 00000000010000000000 00000000100000000000 00000001000000000000 00000010000000000000 00000100000000000000 00001000000000000000 00010000000000000000 00100000000000000000 01000000000000000000 10000000000000000000 Description Find Players Find Monsters Find Undead Monsters Find Missiles Find Objects Find Items Limit number of targets Attackable units only Make sure the target is not in town No missile barriers to center Missile units only Custom check function Find dead units only Units not in town No bosses Run a target check function, checking for unit types and player alignment Allies Target in melee range No Act boss units (See the “primeevil” field in monstats.txt) Units not in the Just Hit state"
    },
    {
      "name": "aurastate",
      "description": "Links to a state that can be applied to the caster unit when casting the skill, depending on the skill function used (See the “state” field in states.txt)"
    },
    {
      "name": "auratargetstate",
      "description": "Links to a state that can be applied to the target unit when using the skill, depending on the skill function used (See the “state” field in states.txt)"
    },
    {
      "name": "auralencalc",
      "description": "Calculation Field. Controls the aura state duration on the unit (where 25 Frames = 1 second). If this value is empty, then the state duration will be controlled by other functions, or it will last forever. This can also be used as a parameter for certain skill functions."
    },
    {
      "name": "aurarangecalc",
      "description": "Calculation Field. Controls the aura state’s area radius size, measured in grid sub-tiles. This can also be used as a parameter for certain skill functions."
    },
    {
      "name": "aurastat1 (to aurastat6)",
      "description": "Controls which stat modifiers will be altered or added by the aura state (See the “Stat” field from ItemStatCost.txt)"
    },
    {
      "name": "aurastatcalc1 (to aurastatcalc6)",
      "description": "Calculation Field. Controls the value for the relative “aurastat#” field."
    },
    {
      "name": "auraevent1 (to auraevent3)",
      "description": "Controls what event will trigger the relative “auraeventfunc#” field function. Links to an event listed in the events.txt file."
    },
    {
      "name": "auraeventfunc1 (to auraeventfunc3)",
      "description": "Controls the function used when the relative “auraevent#” event is triggered. Code 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Parameters srvmissilea cltoverlaya calc1 cltoverlaya auratargetstate calc1 calc2 calc3 calc4 auratargetstate calc1 prgoverlay aurastate aurastat1 aurastat2 calc2 calc3 aurastate calc1 calc2 prgoverlay aurastate aurastat1 aurastat2 Param5 aurarangecalc HitClass aurastatcalc1 aurastatcalc2 passiveitype passivereqweaponcount sumskill1 sumsk1calc Description Do nothing"
    },
    {
      "name": "SorApplyChillingArmor",
      "description": "Shoot a missile at the target unit"
    },
    {
      "name": "SorApplyFrozenArmor",
      "description": "Deal skill damage with the freeze length controlled by the calc field and apply an overlay to the attacker"
    },
    {
      "name": "SorApplyShiverArmor",
      "description": "Deal elemental skill damage and apply an overlay to the attacker"
    },
    {
      "name": "NecApplyIronMaiden",
      "description": "Deal damage to the attacking unit using the calc fields as damage modifiers, based on the state being active. If the target monster is equal to “bloodgolem” then calculate a life steal and also create the “steallife” overlay on the golem’s caster unit."
    },
    {
      "name": "NecApplyLifeTap",
      "description": "If the target has the “auratargetstate” state, then apply a percentage heal to the attacker that is determined by the calc field. Also apply an overlay to the attacker when the attack is healed."
    },
    {
      "name": "ItemApplyAttackerTakesDamage",
      "description": "Deal physical damage to the attacker"
    },
    {
      "name": "ItemApplyKnockback",
      "description": "Determine a chance to knockback the attacker monster"
    },
    {
      "name": "ItemApplyHowl",
      "description": "Apply terror to the monster, changing its AI to run away"
    },
    {
      "name": "ItemApplyDimVision",
      "description": "Based on a random chance, apply the “Dim Vision” skill to the enemy attacker with a random skill level between 1 to 20."
    },
    {
      "name": "ItemApplyAttackerTakesLtngDamage",
      "description": "Deal lightning damage to the attacker"
    },
    {
      "name": "ItemApplyAttackerTakesFireDamage",
      "description": "Deal fire damage to the attacker"
    },
    {
      "name": "ItemApplyAttackerTakesColdDamage",
      "description": "Deal cold damage to the attacker, and apply a cold length that is modified based on the level difference between the attacker and defender"
    },
    {
      "name": "ItemApplyDamageToMana",
      "description": "Add mana to the source unit, based on a percentage of the damage taken. Also add a “stealmana” overlay to the source unit."
    },
    {
      "name": "ItemApplyFreeze",
      "description": "Based on a random chance, deal damage to the enemy attacker and apply a freeze length"
    },
    {
      "name": "ItemApplyOpenWounds",
      "description": "Based on a random chance, apply open wounds on the target, using the “openwounds” state"
    },
    {
      "name": "ItemApplyCrushingBlow",
      "description": "Based on a random chance, deal crushing blow percentage life damage to the enemy attacker and apply the “bash” overlay"
    },
    {
      "name": "ItemApplyManaAfterKill",
      "description": "Add mana to the source unit and add a “stealmana” overlay"
    },
    {
      "name": "ItemApplyHealAfterDemonKill",
      "description": "If a Demon enemy is killed, then add life to the source unit and add a “steallife” overlay"
    },
    {
      "name": "ItemApplySlow",
      "description": "Apply the “slowed” state to the target"
    },
    {
      "name": "ItemApplyHitOrAttack",
      "description": "Based on a random chance, cast a skill on the target when the source unit attacks"
    },
    {
      "name": "ItemApplyGetHit",
      "description": "Based on a random chance, cast a skill on the attacker when the source unit gets hit"
    },
    {
      "name": "NecApplyBoneArmor",
      "description": "Calculates the minimum and maximum damage to absorb based on the aura stat values. If no remaining absorbing damage is left, then remove the state."
    },
    {
      "name": "NecApplyBloodGolemSteal",
      "description": "Calculate a life steal for the attacking unit and its boss unit. Also create the “steallife” overlay on the both units."
    },
    {
      "name": "SorApplyEnergyShield",
      "description": "If the “aurastate” state is active, then calculate the percentage of damage taken by the source unit that should be absorbs and the amount of mana that should be consumed by the percent absorbed. Also apply an overlay on the source unit. If the source unit runs out of mana, then remove the state."
    },
    {
      "name": "DruApplyCycloneArmor",
      "description": "Calculates the minimum and maximum elemental damage to absorb based on the aura stat values. If no remaining absorbing damage is left, then remove the state."
    },
    {
      "name": "NecApplyBloodGolemShare",
      "description": "Controls the percentage of damage taken by the source unit that should be transferred to the source unit’s boss."
    },
    {
      "name": "NecApplyClayGolemSlow",
      "description": "Apply the “slowed” state to the target"
    },
    {
      "name": "ItemApplyHealAfterKill",
      "description": "Add life to the source unit and add a “steallife” overlay"
    },
    {
      "name": "ItemApplyRestInPeace",
      "description": "Apply the “restinpeace” state on the enemy unit"
    },
    {
      "name": "ItemApplyOnDeath",
      "description": "Based on a random chance, cast a skill when the source unit dies"
    },
    {
      "name": "ItemApplyReanimate",
      "description": "Based on a random chance, revive a dead monster that is not a champion or unique."
    },
    {
      "name": "SkillApplyRadiusDamage",
      "description": "Use a skill’s damage to deal damage in an area based on the skill’s hit class"
    },
    {
      "name": "SkillActivateSubskill",
      "description": "Based on a random chance controlled by the “aurastatcalc1” value, cast a skill (determined by “sumskill1”) with a skill level controlled by “sumsk1calc”. If “aurastatcalc2” value is greater than 0, then factor the “passiveitype” and “passivereqweaponcount” fields for determining if the skill should be cast or not."
    },
    {
      "name": "passivestate",
      "description": "Links to a state that can be applied by the passive skill, depending on the skill function used (See the “state” field in states.txt)"
    },
    {
      "name": "passiveitype",
      "description": "Links to an Item Type to define what type of item needs to be equipped in order to enable the passive state (See the “ItemType” field in ItemTypes.txt)"
    },
    {
      "name": "passivereqweaponcount",
      "description": "Controls how many equipped weapons are needed for this passive state to be enabled. If the value equals 1, then the player must have 1 weapon equipped for this passive state to be enabled. If the value equals 2, then the player must be dual wielding weapons for this passive state to be enabled. If the value equals 0, then ignore this field."
    },
    {
      "name": "passivestat1 (to passivestat10)",
      "description": "Assigns stat modifiers to the passive skill (See the “Stat” field from ItemStatCost.txt)"
    },
    {
      "name": "passivecalc1 (to passivecalc10)",
      "description": "Calculation Field. Controls the value for the relative “passivestat#” field."
    },
    {
      "name": "summon",
      "description": "Controls what monster is summoned by the skill (See the “Id” field in monstats.txt). This field’s usage will depend on the skill function used. This field can also be used as reference for AI behaviors and for the skilldesc.txt file."
    },
    {
      "name": "pettype",
      "description": "Links to a pet type data to control how the summoned unit is displayed on the UI (See “pet type” field in pettype.txt)"
    },
    {
      "name": "petmax",
      "description": "Calculation Field. Used skill functions that summon pets to control how many summon units are allowed at a time."
    },
    {
      "name": "summode",
      "description": "Defines the animation mode that the summoned monster will be initiated with Token Description DT NU WL GH A1 A2 BL SC S1 S2 S3 S4 DD GH xx RN Death / Reset Neutral Walk Get Hit Attack 1 Attack 2 Block Cast Skill 1 Skill 2 Skill 3 Skill 4 Dead Knockback Sequence Run"
    },
    {
      "name": "sumskill1 (to sumskill5)",
      "description": "Assigns a skill to the summoned monster. Points to another “skill” id. This can be useful for adding a skill to a monster to transition its synergy bonuses."
    },
    {
      "name": "sumsk1calc (to sumsk5calc)",
      "description": "Calculation Field. Controls the skill level for the designated “sumskill#” field when the skill is assigned to the monster."
    },
    {
      "name": "sumumod",
      "description": "Assigns a monster modifier to the summoned monster (See the “id” in monumod.txt)"
    },
    {
      "name": "sumoverlay",
      "description": "Creates an overlay on the summoned monster when it is first created (see the “overlay” field in Overlay.txt)"
    },
    {
      "name": "stsuccessonly",
      "description": "Boolean Field. If equals 1, then the following sound and overlay fields will only play when the skill is successfully cast, instead of always being used even when the skill cast is interrupted. If equals 0, then the following sound and overlay fields will always be used when the skill is cast, regardless if the skill was interrupted or not."
    },
    {
      "name": "stsound",
      "description": "Controls what client sound is played when the skill is used, based on the client starting function (see the “Sound” field in sounds.txt)"
    },
    {
      "name": "stsoundclass",
      "description": "Controls what client sound is played when the skill is used by the skill’s assigned class (See “charclass” field), based on the client starting function (see the “Sound” field in sounds.txt). If the unit using the skill is not the same class as the “charclass” value for the skill, then this sound will not play."
    },
    {
      "name": "stsounddelay",
      "description": "Boolean Field. If equals 1, then use the weapon’s hit class to determine the delay in frames (where 25 frames = 1 second) before playing the skill’s start sound. If equals 0, then the skill’s start sound will play immediately. Sound Used None weapon_punch_1 weapon_1hs_small_1 weapon_1hs_large_1 weapon_2hs_small_1 weapon_2hs_large_1 weapon_1ht_1 weapon_2ht_1 weapon_1hs_large_1 weapon_staff_1 None None None Hit Class None"
    },
    {
      "name": "Hand",
      "description": "To-Hand One Handed Swing Small One Handed Swing Large Two Handed Swing Small Two Handed Swing Large One Handed Thrust Two Handed Thrust Club Staff Bow Crossbow Claw Sound Delay 0 frames 6 frames 6 frames 6 frames 8 frames 8 frames 6 frames 6 frames 6 frames 6 frames 0 frames 0 frames 0 frames"
    },
    {
      "name": "weaponsnd",
      "description": "Boolean Field. If equals 1, then play the weapon’s hit sound when hitting an enemy with this skill. The sound chosen is based on the weapon’s hit class. Also use the sound delay based on the weapon’s hit class to determine the delay in frames (where 25 frames = 1 second) before playing the weapon hit sound (See “stsounddelay” for the types of hit class sounds and delays used). If equals 0, then do not play the weapon hit sound when hitting an enemy with the skill attack."
    },
    {
      "name": "dosound",
      "description": "Controls the sound for the skill each time the Client Do function is used (see the “Sound” field from sounds.txt)"
    },
    {
      "name": "dosound a & dosound b",
      "description": "Used as a possible parameter for playing additional sounds based on the Client Do function used (see the “Sound” field in sounds.txt)"
    },
    {
      "name": "tgtoverlay",
      "description": "Used as a possible parameter for adding an Overlay on the target unit, based on the Client Do function used (see the “overlay” field in Overlay.txt)"
    },
    {
      "name": "tgtsound",
      "description": "Used as a possible parameter for playing a sound located on the target unit, based on the Client Do function used (see the “Sound” field in sounds.txt)"
    },
    {
      "name": "prgoverlay",
      "description": "Used as a possible parameter for adding an Overlay on the caster unit for progressive charge-up skill functions, based on the Client Do function used and how many progressive charges the caster unit has (see the “overlay” field in Overlay.txt)"
    },
    {
      "name": "prgsound",
      "description": "Used as a possible parameter for playing a sound when using the skill for progressive charge-up skill functions, based on the Client Do function used and how many progressive charges the caster unit has (see the “Sound” field in sounds.txt)"
    },
    {
      "name": "castoverlay",
      "description": "Used as a possible parameter for adding an Overlay on the caster unit when using the skill, based on the Client Start/Do function used (see the “overlay” field in Overlay.txt)"
    },
    {
      "name": "cltoverlaya & cltoverlayb",
      "description": "Used as a possible parameter for adding additional Overlays on the caster unit, based on the Client Start/Do function used (see the “overlay” field in Overlay.txt)"
    },
    {
      "name": "cltstfunc",
      "description": "Client Start function. This controls how the skill works when it is starting to cast, on the client side. This uses a code value to call a function, affecting how certain fields are used. Parameters Code 0 1 2 3 Description Do nothing"
    },
    {
      "name": "StartAttack",
      "description": "Check that the weapon is not a “Missile Potion” item type and if the player has enough ammunition if it is a ranged weapon"
    },
    {
      "name": "StartThrow",
      "description": "Check that the player has enough ammunition"
    },
    {
      "name": "StartUnsummon",
      "description": "Check that the target is a monster owned by the player and that the monster’s Pet Type has “unsummon” enabled (See pettype.txt) 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 calc1 aurastate prgoverlay prgsound seqinput Param4 aurarangecalc calc1 calc3 calc1 prgoverlay prgsound aurarangecalc cltmissilec cltmissilec cltmissilea cltmissileb cltmissilec dosound a Param1 cltcalc1 aurarangecalc cltmissilea cltmissileb cltcalc1 calc1 calc2 cltmissilea"
    },
    {
      "name": "StartLeftAttack",
      "description": "Return true"
    },
    {
      "name": "AssStartPsychicHammer",
      "description": "Check that the target is a valid player or monster"
    },
    {
      "name": "AssStartDragonClaw",
      "description": "Validate that the target is a proper enemy, and use the skill’s “calc1” field to save the number of kicks to be used by the skill"
    },
    {
      "name": "AssStartCloakOfShadows",
      "description": "Check that the player does not already have the state"
    },
    {
      "name": "AssStartBladeFury",
      "description": "Add the overlay and sound if the player does not have the “inferno” state. If the player does not have the “inferno” state, then add it. Otherwise set the player’s animation sequence frame."
    },
    {
      "name": "AssStartDragonTail",
      "description": "Adjust the player’s attack speed using the skill’s parameter"
    },
    {
      "name": "AssStartDragonFlight",
      "description": "Validate that the target is an enemy monster or player"
    },
    {
      "name": "AmaStartCheckQuantity",
      "description": "Check that the player has enough ammunition for the weapon"
    },
    {
      "name": "AmaStartJab",
      "description": "Validate the skill and prepare to track the max targets to attack"
    },
    {
      "name": "AmaStartStrafe",
      "description": "Use the skill’s calculation fields to track the minimum and maximum number of shots. Use the skill’s “aurarangecalc” value to count nearby valid targets. Have the caster unit face the first valid target found."
    },
    {
      "name": "AmaStartFend",
      "description": "Find at least an initial valid target and prepare to track the max targets to attack"
    },
    {
      "name": "SorStartInferno",
      "description": "Add the overlay and sound if the player does not have the “inferno” state. If the player does not have the “inferno” state, then add it. Otherwise set the player’s animation sequence frame."
    },
    {
      "name": "SorStartTelekinesis",
      "description": "Check the range of the skill using the “aurarangecalc” value and ensure there is a valid monster or player to target in the area"
    },
    {
      "name": "SorStartHydra",
      "description": "Check for a valid area and ensure that the skill cannot be used in town"
    },
    {
      "name": "NecStartCurse",
      "description": "Validate and launch the client missile"
    },
    {
      "name": "NecStartTeeth",
      "description": "Validate and create the missile to launch in a direction based on the cast position"
    },
    {
      "name": "NecStartRaiseSkeleton",
      "description": "Check that the target corpse is valid"
    },
    {
      "name": "NecStartCExplosion",
      "description": "Check that there is a valid enemy corpse"
    },
    {
      "name": "NecStartBonePrison",
      "description": "Check for a valid area and ensure that the skill cannot be used in town"
    },
    {
      "name": "NecStartIronGolem",
      "description": "Check that the target item on the ground is valid and that it is identified"
    },
    {
      "name": "NecStartRevive",
      "description": "Validate that the target monster can be revived. Based on the monster’s “OverlayHeight” value (See monstats2.txt), create 1 of the 3 client missiles in a random direction. If the monster’s “OverlayHeight” value equals 1, then create “cltmissileb”. If the monster’s “OverlayHeight” value equals 3, then create “cltmissilec”."
    },
    {
      "name": "PalStartCharge",
      "description": "If the player is in melee range of the target, then start an attack. If the caster unit is a player then play the “dosound a” sound. If the caster unit is a monster, then play the monster’s skill sound (see monsounds.txt). Ensure that the target is not in an uninterruptable state. Adjust the movement speed of the caster unit. Set the caster unit’s movement velocity speed percent so the skill’s “Param1” value. Add movement parameters for the skill function."
    },
    {
      "name": "BarStartFindHeart",
      "description": "Check that the target corpse is valid and has not been used yet"
    },
    {
      "name": "BarStartDoubleSwing",
      "description": "Adjust the caster unit’s attack speed based on the “cltcalc1” field"
    },
    {
      "name": "BarStartFindItem",
      "description": "Check that the target corpse is valid and has not been used yet"
    },
    {
      "name": "BarStartLeap",
      "description": "Check that the caster unit is not in an uninterruptible state. If the caster unit is a monster, then find a valid location past the target unit. If the caster unit is not a monster, then find a valid location and ensure that the target location is not in town. Store the target location. The target range is controlled by the “aurarangecalc” field."
    },
    {
      "name": "BarStartLeapAttack",
      "description": "Check that the caster unit is not in an uninterruptible state. If the player is in melee range of the target, then start an attack. Validate the target location, checking for proper player collision. Store the target location."
    },
    {
      "name": "BarStartWhirlwind",
      "description": "Check that the caster unit is not in an uninterruptible state. Modify the caster unit’s collision to only collide with walls and objects. Adjust the caster unit’s velocity. Add movement parameters for the skill function. Minimum whirlwind distance equals 5."
    },
    {
      "name": "MonStartMaggotUp",
      "description": "Set the caster unit to be attackable and selectable. If the current area level is in Act 2, then create the “cltmissileb” missile, otherwise create the “cltmissilea” missile. Find a valid location, checking for collision, and then warp the caster unit to that location."
    },
    {
      "name": "MonStartMaggotDown",
      "description": "Set the unit to no longer be attackable or selectable and remove its collision"
    },
    {
      "name": "MonStartAndariel",
      "description": "Validate the target enemy and store the target unit’s location for the skill function"
    },
    {
      "name": "MonStartSwarmMove",
      "description": "Find a valid path with a proper distance, and set movement parameters"
    },
    {
      "name": "MonStartNest",
      "description": "Validate the monster class, store the target location, and set the collision in the caster unit’s location to be a monster collision"
    },
    {
      "name": "MonStartSubmerge",
      "description": "Set the unit to no longer be attackable or selectable"
    },
    {
      "name": "MonStartEmerge",
      "description": "Set the unit to be attackable or selectable"
    },
    {
      "name": "MonStartResurrect",
      "description": "Unhide the unit"
    },
    {
      "name": "MonStartDiabLight",
      "description": "Use the “cltcalc1” field to calculate a periodic delay for spawning missile and store that value in a parameter"
    },
    {
      "name": "MonStartDiabRun",
      "description": "Clear all function flags on the skill"
    },
    {
      "name": "MonStartMosquito",
      "description": "Validate the target enemy. Use the “calc1” and “calc2” fields as min and max values to randomly select a value to control a loop count, and store that loop count as a parameter for the skill function."
    },
    {
      "name": "MonStartCurse",
      "description": "Validate and launch the client missile"
    },
    {
      "name": "MonStartHellMeteor",
      "description": "Create the following missiles: “hellmeteordown”, “hellmeteorball”, “hellmeteorup”, “hellmeteorball”, “hellmeteorlaunch1”, “hellmeteorlaunch2” 45 46 47 48 49 50 51 52 53 aurastate cltoverlaya cltoverlayb aurastate aurastat1 cltmissilea prgsound aurastate aurastat1 cltcalc1 cltmissilea cltmissileb cltmissilec cltmissilea cltmissilea cltmissileb cltcalc1 calc2 calc1"
    },
    {
      "name": "DruStartWereWolf",
      "description": "Add the “cltoverlayb” overlay to the caster unit if the unit has the “aurastate” state. Otherwise, add the “cltoverlaya” overlay to the caster unit."
    },
    {
      "name": "MonStartBaalTaunt",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile. Create the “baal taunt control” missile. Play the “prgsound” sound."
    },
    {
      "name": "MonStartCatapultDropMissile",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the missile and use the “cltcalc1” value to set the missile’s fall rate."
    },
    {
      "name": "MonStartTeleport2",
      "description": "Create the missile at the target location"
    },
    {
      "name": "MonStartVines",
      "description": "Create the “cltmissilea” missile. Use the “cltcalc1” value to control the number of created “cltmissileb” missiles."
    },
    {
      "name": "MonStartDeathSentry",
      "description": "Validate the target enemy and store the target unit’s location for the skill function"
    },
    {
      "name": "sMonStartFenrisRage",
      "description": "Validate the target enemy corpse. Store the target unit’s location and unit class for the skill function."
    },
    {
      "name": "MonStartInfernoSentry",
      "description": "Add the “inferno” state to the caster unit if it is not already added. Use the “calc1” field to control the animation frame tick and store the value for the skill function."
    },
    {
      "name": "AmaStartFend2",
      "description": "Find at least an initial valid target and track the max targets to attack using the “calc1” value. Have the caster unit face the target unit."
    },
    {
      "name": "cltdofunc",
      "description": "Client Do function. This controls how the skill works when it finishes being cast, on the client side. This uses a code value to call a function, affecting how certain fields are used. Parameters Code 0 1 2 3 4 5 6 7 8 9 10 11 prgcalc1 prgcalc2 prgcalc3 aurarangecalc aurastate aurastat1 cltmissilea cltmissileb cltmissilec prgcalc1 prgcalc2 prgcalc3 aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurarangecalc cltmissilea cltmissileb prgcalc1 prgcalc2 prgcalc3 aurarangecalc aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurastate aurastat1 cltmissilea cltmissileb cltmissilec prgcalc1 prgcalc2 prgcalc3 aurarangecalc aurastate aurastat1 Description Do nothing"
    },
    {
      "name": "DoAttack",
      "description": "If this is a ranged attack, then launch the client missile. Otherwise, apply damage to the target."
    },
    {
      "name": "DoThrow",
      "description": "If the weapon is a “Missile Potion” item type then launch a missile using the lob function. Otherwise, launch a missile with the normal linear function."
    },
    {
      "name": "AssDoPsychicHammer",
      "description": "Validate the “AssStartPsychicHammer” function"
    },
    {
      "name": "AssDoDragonClaw",
      "description": "Check the number of attacks. Roll back the animation by 100%."
    },
    {
      "name": "AssDoShockField",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges. Get the range by using the “aurarangecalc” field. Create the calculated number of missiles using the lob function."
    },
    {
      "name": "AssDoBladeFury",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges. Every periodic delay create a client missile and set the Z position to 15. If the caster unit has the “inferno” state, then repeat the sequence do frame."
    },
    {
      "name": "AssDoDragonTail",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the client missile and set the caster unit’s mode event."
    },
    {
      "name": "AssDoMindblast",
      "description": "Create the “cltmissilea” missile at the target location. Use the “aurarangecalc” field to calculate the area radius value of the missile. Set the missile’s spawn class to “cltmissileb”."
    },
    {
      "name": "AssDoMissileDisc",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges. Get the radius by using the “aurarangecalc” field. Create a ring of client missiles where the number of missile depends on the size of the radius value."
    },
    {
      "name": "AssClawsOfThunderLvl2",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the client missile where its velocity is calculated based on the skill level instead of the missile level."
    },
    {
      "name": "AssClawsOfThunderLvl3",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges. Use the “aurarangecalc” field to calculate the number of missiles. Create the client missiles using random pattern directions. 12 13 14 15 16 17 18 19 20 cltmissilea cltmissileb cltmissilec prgoverlay prgsound aurastate aurastat1 prgoverlay prgsound aurastate aurastat1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec prgcalc1 prgcalc2 prgcalc3 aurastate aurastat1 cltmissilea cltmissileb cltmissilec dosound a dosound b cltmissilea cltmissileb calc1 calc2 calc5 aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 aurarangecalc cltmissilea cltmissileb Param6 21 Param2 22 23 24 25 26 aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 calc2 aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 cltmissilea cltmissileb calc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltcalc1 cltmissilea calc1"
    },
    {
      "name": "AssTigerStrike",
      "description": "Based on the “progressive” flag, if the caster unit has the “aurastate” state, or if the “aurastat1” field value is greater than 0, determine whether to add the overlay and sound on the caster unit. If the caster unit has progressive charges, then increase the index of the overlay and the sound by 1 per charge and add those overlay and sounds instead."
    },
    {
      "name": "AssCobraStrike",
      "description": "Based on the “progressive” flag, if the caster unit has the “aurastate” state, or if the “aurastat1” field value is greater than 0, determine whether to add the overlay and sound on the target unit. If the caster unit has progressive charges, then increase the index of the overlay and the sound by 1 per charge and add those overlay and sounds instead."
    },
    {
      "name": "AssRoyalStrikeMeteorLvl1",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the selected client missile at the target location."
    },
    {
      "name": "AssRoyalStrikeChaosIce",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges. Create the number of selected client missiles using randomized directions."
    },
    {
      "name": "AmaDoJab",
      "description": "On the frame event of type “Sound”, if the caster unit is a player then play the “dosound a” sound, or if the caster unit is a monster than play the “dosound b” sound AmaDoMultipleShot – If the weapon class is not equal to a “bow” then use “cltmissileb”, otherwise use “cltmissilea”. Use the “calc1” value to determine the number of missiles to create. Use the “calc2” value to determine the activation frame of the missiles. Create the missiles. Use the \"calc5\" value to calculate Guided Arrow synergy."
    },
    {
      "name": "AmaDoGuidedArrow",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the selected client missile with flags of either following a target or going to a location to be retargeted later."
    },
    {
      "name": "AmaDoChargedStrike",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “calc1” value to determine the number of missiles to create. Create the missiles that move in a randomized path towards the direction."
    },
    {
      "name": "AmaDoStrafe",
      "description": "Use “aurarangecalc” to determine the skill range. The max targets and current target are controlled by a saved parameter. If the weapon class is not equal to a “bow” then use “cltmissileb”, otherwise use “cltmissilea”. Use the “Param6” value to determine the percentage of animation frames to rollback. Find the next target to attack. Create a client missile, making the caster unit face the direction, and update the target count parameter."
    },
    {
      "name": "AmaDoFend",
      "description": "Use the weapon range to determine the skill range. Find the next valid target to attack and then update the maximum targets to attack next time. Use the “Param2” value to determine the percentage of animation frames to rollback. Based on the hit class, determine what weapon sound to play."
    },
    {
      "name": "AmaDoLightningStrike",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “calc1” value to determine the range of the missile to find the next target. Use the “calc2” value to determine the maximum number of chain hits for the missile. Create the missile targeting the target unit."
    },
    {
      "name": "SorDoChargedBolt",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “calc1” value to determine the number of missiles to create. Create the missiles that move in a randomized path towards the direction."
    },
    {
      "name": "SorDoInferno",
      "description": "Randomly select between either “cltmissilea” or “cltmissileb”. Use the “calc1” value to determine the range of the missile. Create the client missile and adjust the caster unit’s animation frames. If the caster unit still has the “inferno” state, then repeat the animation do frame."
    },
    {
      "name": "SorDoFrostNova",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “cltcalc1” value to determine the additional velocity to add to the missiles created. Create a ring of missiles."
    },
    {
      "name": "SorDoFirewall",
      "description": "Validate the target location. Validate that the missile create has a missile linked in its “SubMissile1” field (see Missiles.txt). Use the “calc1” value to determine the maximum number of fire wall spawning missiles. Create 2 of the “cltmissilea” missiles thar are launched in opposite directions. Create 1 of the “cltmissilea” missile’s sub missile. 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltcalc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurarangecalc cltmissilea aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltmissilea cltmissileb cltmissilec tgtsound cltmissilea cltmissileb cltmissilec tgtsound cltmissilea cltcalc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltmissilea cltmissileb cltmissilec cltmissilea"
    },
    {
      "name": "SorDoChainLightning",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “calc1” value to determine the maximum number of chain hits for the missile. Create the missile targeting the target unit and update the number of chain hits in a parameter."
    },
    {
      "name": "SorDoMeteor",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Validate that the target location is valid and then create the missile."
    },
    {
      "name": "SorDoFrozenOrb",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected client missile."
    },
    {
      "name": "NecDoCurse",
      "description": "Use “aurarangecalc” to determine the radius of the skill and always subtract a value of 3 (Min value = 2). Create the client missile at the cursor location and also create a light at the location with RGB values equal to 255, 0, 0."
    },
    {
      "name": "NecDoRaiseSkeleton",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected client missile facing the directions saved in the parameters."
    },
    {
      "name": "NecDoCExplosion",
      "description": "Create “cltmissilea” at the target location facing a random direction. If the target monster is “small” then spawn 1 “cltmissilea”. If the target monster is “large” then spawn 3 “cltmissilea” missiles in a radius value of 3, and if that missile has a “SubMissile1” value, then also spawn 4 sub missiles in a radius value of 2. If the target monster is neither “small” nor “large”, then spawn 2 “cltmissilea” missiles in a radius value of 2, and spawn 3 of its sub missiles in a radius value of 1. (See Missiles.txt and monstats2.txt). Spawn 1 “cltmissileb” normally. Spawn 1 “cltmissilec” missile with its level equal to 2. If there is no target enemy, then play the “tgtsound” sound."
    },
    {
      "name": "NecDoPoisonExplosion",
      "description": "Create “cltmissilea” at the target location facing a random direction. Spawn an inner and outer radial ring of “cltmissileb” missiles, based on the missile’s “Param1” and “Param2” values (See Missiles.txt). Spawn 1 “cltmissilec” missile with its level equal to 2. If there is no target enemy, then play the “tgtsound” sound."
    },
    {
      "name": "PalDoSacrifice",
      "description": "Validate the target enemy and spawn the client missile in a random direction, where the missile can receive additional range that is randomly selected between 0 and the “cltcalc1” value."
    },
    {
      "name": "PalDoBlessedHammer",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected client missile with a spiral path."
    },
    {
      "name": "PalDoFistOfHeavens",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected client missile and save the target unit type and ID as parameters."
    },
    {
      "name": "PalDoCharge",
      "description": "Setup a sequence of frames to play the animation. If the caster unit is a player or monster, then play its attack sound at the sound frame event. Set the unit’s animation and frame length and order the unit to move to a location or the previously targeted unit. If the player does not need to move, then attack the target or a nearby target."
    },
    {
      "name": "BarDoFindHeart",
      "description": "If the target is valid, then set the mode event and create blood missiles from the monster (see “bleed” in monstats2.txt)"
    },
    {
      "name": "BarDoDoubleSwing",
      "description": "If the caster unit’s animation sequence frame is less than 6, then play the weapon sound and have the character turn to face the target. Otherwise, have the caster unit find a proper target and face that target."
    },
    {
      "name": "BarDoFindItem",
      "description": "If the target is valid (see “soft” monstats2.txt), then set the mode event and create blood missiles from the monster (see “bleed” in monstats2.txt)"
    },
    {
      "name": "BarDoGrimWard",
      "description": "If the target is valid (see “soft” monstats2.txt) and there is valid space at that target’s location, then create one of the following missiles. By default, use the “cltmissilea” missile. If the monster is large (see “large” in monstats2.txt), then use the “cltmissilec” missile. If the monster is small (see “large” in monstats2.txt), then use the “cltmissileb” missile. Also, always create a “corpseexplosion” missile."
    },
    {
      "name": "BarDoDoubleThrow",
      "description": "Check that the attacking weapon is throwable and shoot a missile based on the weapon’s missile class. If the weapon’s item type is a “Missile Potion” (see ItemTypes.txt), then use the lobbing missile launch function, otherwise use the normal linear missile launch function."
    },
    {
      "name": "BarDoLeap",
      "description": "Check different flags and parameters to determine when to stop leaping. There are special cases to handle the “sandleadper1” and “ancientbarb1” monsters."
    },
    {
      "name": "BarDoLeapAttack",
      "description": "Check different flags and parameters to determine when to stop leaping. After leaping, if there is a valid target, then attack the target."
    },
    {
      "name": "BarDoWhirlwind",
      "description": "Continue to whirlwind based until at reaching the target location or if the skill flags have been changed."
    },
    {
      "name": "MonDoMagottEgg",
      "description": "Set the unit’s animation sequence rate to 0"
    },
    {
      "name": "MonDoMaggotDown",
      "description": "When the unit’s animation frame reaches 0, then set the unit’s animation sequence rate to 0"
    },
    {
      "name": "MonDoAndariel",
      "description": "Based on the unit’s current direction, launch the missile in one of 8 directions 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 calc1 calc2 cltmissilea aurarangecalc cltmissilea cltcalc1 cltmissilea cltmissileb calc1 cltmissilea calc1 calc2 cltmissilea cltcalc1 calc1 cltmissilea calc1 cltmissilea calc1 calc1 Param1 Param2 Param3 Param4 Param5 Param6 cltmissilea calc1 cltmissilea Param1 cltmissilea cltmissileb aurarangecalc cltmissileb aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltmissilea cltmissileb cltcalc1 cltcalc2 aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltcalc1 cltmissileb cltmissileb"
    },
    {
      "name": "MonDoSwarmMove",
      "description": "Set the unit’s animation sequence start and stop frames based on the skill’s calculation values"
    },
    {
      "name": "MonDoNest",
      "description": "Remove the monster collision at the target location"
    },
    {
      "name": "MonDoGargoyleTrap",
      "description": "Launch the missile in one of 4 directions."
    },
    {
      "name": "MonDoSubmerge",
      "description": "This equals the “MonDoMaggotDown” function (Code = 47)"
    },
    {
      "name": "MonDoFetishAura",
      "description": "Create a disc of missiles where “aurarangecalc” controls the disc radius size (Minimum value = 1) and “cltcalc1” controls the density of missiles created (higher value means less missiles)."
    },
    {
      "name": "sMonDoFetishInferno",
      "description": "Randomly create 2 of either “cltmissilea” or “cltmissileb” missiles. Use “calc1” to determine the range of the missile if it is greater than 0, otherwise use the missile’s “Param2” value (See Missiles.txt)."
    },
    {
      "name": "MonDoPrimePoisonNova",
      "description": "Creates 8 missiles in different directions using a velocity set by the missile’s “Param1” value (See Missiles.txt). Then uses “calc2” to control how many additional missiles to create using a velocity set by the missile’s “Param2” value. Uses “calc1” to set the missile’s subloops."
    },
    {
      "name": "MonDoDiabLight",
      "description": "Create the missile at an interval controlled by the “cltcalc1” value. Use “calc1” to determine the range of the missile if it is greater than 0, otherwise use the missile’s “Param2” value (See Missiles.txt). Also use the monster’s inferno values to set the animation frames (see monstats2.txt)"
    },
    {
      "name": "MonDoFingerMageSpider",
      "description": "Create the missile with its subloops controlled by “calc1” and have that missile positioned and face the caster unit"
    },
    {
      "name": "MonDiabWallMaker",
      "description": "Create a number of missiles controlled by the “calc1” value where their pathing and direction is randomized"
    },
    {
      "name": "MonDoDiabRun",
      "description": "Modifies the caster unit’s movement speed by a percentage controlled by “calc1” and controls its animations to adhere to this run mode. The 6 parameter values controls the run animation’s stop frame length, stop event frame, start event frame, start frame length, loop repeat event frame, loop frame length, and loop start event frame."
    },
    {
      "name": "MonDoDesertTurret",
      "description": "Fire a number of missiles controlled by the “calc1” value that are directed in 8 possible directions"
    },
    {
      "name": "MonDoArcaneTower",
      "description": "Fire missiles in all possible directions with particles"
    },
    {
      "name": "MonDoMosquito",
      "description": "Check that the caster unit cannot melee the target and then repeat the animation for a number of loops saved in a parameter, where “Param1” controls the frame to repeat the animation."
    },
    {
      "name": "MonDoRegurgitatorEat",
      "description": "Create 1 “cltmissilea” missile in a random direction. Create 5 “cltmissileb” missiles in a radius value of 4."
    },
    {
      "name": "MonDoQueenDeath",
      "description": "Repeatedly loop the animation using hardcoded frame counts, and then set the unit to Dead mode when finished"
    },
    {
      "name": "MonDoCurseRadius",
      "description": "Find a valid target and create a “cursecenter” missile. Then create the “cltmissileb” missile with a radius controlled by “aurarangecalc”"
    },
    {
      "name": "MonDoHireFireMissile",
      "description": "Use the lob launch function or normal linear launch function when creating the missile"
    },
    {
      "name": "DruDoFirestorm",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch a number of selected client missiles, controlled by the “calc1” value. These missiles has randomized directions and pathing, and they have an increased animation rate."
    },
    {
      "name": "DruDoTwister",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch a number of selected client missiles, controlled by the “calc1” value. These missiles start with a linear direction and then change to randomized pathing."
    },
    {
      "name": "DruDoTornado",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch a number of selected client missiles, controlled by the “calc1” value. These missiles start with a linear direction and then change to randomized pathing, and they have an increased animation rate."
    },
    {
      "name": "MonDoWakeofFire",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected missile in the opposite direction."
    },
    {
      "name": "MonDoInferno",
      "description": "Randomly create 1 of either “cltmissilea” or “cltmissileb” missiles. Use “cltcalc1” to control the missile’s Z offset. Use “cltcalc2” to control add to the missile’s range, which is also determined by the missile’s “Param2” value (See Missiles.txt)"
    },
    {
      "name": "MonDoImpFireBall",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the missile to the target location. Use the “cltcalc1” value to control the missile’s Z offset value."
    },
    {
      "name": "MonDoTeleport2",
      "description": "Create the missile at the caster unit’s location with its skill level set to 1"
    },
    {
      "name": "MonDoTeleport3",
      "description": "Create the missile at the caster unit’s location with its skill level set to 1. Also create a particle and add it to the target unit. 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 Param1 Param2 Param3 Param4 cltmissilea cltmissileb calc1 cltmissilea cltmissileb cltcalc1 calc1 cltmissilea cltmissileb prgsound cltmissilea aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 calc2 aurastate aurastat1 cltmissilea cltmissileb cltmissilec Param5 Param6 prgcalc1 prgcalc2 prgcalc3 aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurarangecalc Param2 cltmissilea prgoverlay aurastate aurastat1 cltmissilea cltmissileb cltmissilec aurarangecalc aurastate aurastat1 cltmissilea cltmissileb cltmissilec cltcalc1 cltcalc2 cltcalc3 cltmissilec cltmissiled cltcalc1 cltmissilea cltmissileb cltmissilec prgsound cltcalc1 cltcalc2 cltmissilea cltmissileb cltmissilea cltmissileb cltcalc1 cltcalc2"
    },
    {
      "name": "MonDoSiegeBeastStomp",
      "description": "Shake the camera screen, where the parameters control the magnitude, shake build up duration, shake loop duration, and shake fade duration (controlled in frames where 25 frames = 1 second)."
    },
    {
      "name": "MonDoDeathMauler",
      "description": "Continuously create “cltmissileb” missiles as the trail missile’s using the missile’s “Param1” and “Param2” values (See Missiles.txt) to control the frequency and range/frames of the missile’s creation. Create the “cltmissilea” missile with an animation rate controlled by “calc1”, set this missile to not draw, and update its range and activation frame delay based on the “cltmissileb” missile’s “Param1” and “Param2” values."
    },
    {
      "name": "MonDoInfernoSentry",
      "description": "Randomly create 1 of either “cltmissilea” or “cltmissileb” missiles. Use “cltcalc1” to control the missile’s Z offset. Use “calc1” to control the missile range duration. Repeat the Do frame while the caster unit has the “inferno” state."
    },
    {
      "name": "MonDoDeathSentry",
      "description": "Create the “cltmissilea” missile at the target location and play the “prgsound” sound. Then create the “cltmissileb” missile at the target location."
    },
    {
      "name": "MonDoFenrisRage",
      "description": "Create the “cltmissilea” missile at the target location"
    },
    {
      "name": "MonDoBaalInferno",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create a number of the selected missiles where “calc1” controls the number of missiles created, and “calc2” controls the range duration of the missiles. Repeat the Do frame while the caster unit has the “inferno” state."
    },
    {
      "name": "MonDoBaalCold",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Launch the selected missile to the target location."
    },
    {
      "name": "MonStartBaalCExplode",
      "description": "Use “Param5” and “Param6” to calculate the baseline and increase per skill level change in the radius to find a target. Search for valid dead targets and create a “baalcorpseexplodedelay” missile for each target found."
    },
    {
      "name": "ApplyRoyalStrikeLvl2",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Get the number of missiles using the “progcalc#” values, based on the number of progressive charges, and if they are equal to or less than 0, then use the “aurarangecalc” value instead. Create the missile, using the “Param2” value to control the number of chain hits that the missile bounces."
    },
    {
      "name": "SorDoThunderStorm",
      "description": "Launch the missile at the target’s position, with a starting Z position"
    },
    {
      "name": "equal to 280 and a starting velocity equal to",
      "description": "40. Also add the overlay to the target unit."
    },
    {
      "name": "ItemDoOpenWounds",
      "description": "Create a blood missile from the unit every 5 frames (see “bleed” in monstats2.txt)"
    },
    {
      "name": "PalDoSanctuary",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Use the “aurarangecalc” value to determine the radius to randomly create missiles and also the number of missiles to create."
    },
    {
      "name": "SorApplyShiverArmor",
      "description": "Based on the “progressive” flag, the “aurastate” field, or the “aurastat1” field, validate the “cltmissilea” missile or use the other missiles based on the “aurastat1” value. Create the selected missile using the lob function. Use “cltcalc1” to control the delay between creating missiles. Use “cltcalc2” to control the radius to create the missile. Use “cltcalc3” to control the vertical height of the missile when it is created."
    },
    {
      "name": "MonApplyAttached",
      "description": "Attach the source unit on the caster unit."
    },
    {
      "name": "MonDoVineBeast",
      "description": "Validate that the caster unit is a monster type. Validate that the skill used is the “Vine Attack” skill and get its stats, otherwise use a default level 1 “Vine Attack” skill. Use the “cltcalc1” value to determine the frame delay between creating missiles and also the minimum distance between missiles created. If the current mode of the unit is “Walk” then randomly choose between creating the “cltmissilec” or “cltmissiled” missile. If the current mode of the unit is “Neutral” then kill any existing old missile and create the “cltmissiled”."
    },
    {
      "name": "DruDoHurricane",
      "description": "Play the “prgsound” sound and stop playing it if the caster unit is in town. Use “cltcalc1” to how many sets of 3 missiles to create at a time, at a random height. Randomly choose between one of the 3 missiles to create each time, and use “cltcalc2” to control the maximum Z height position of the missile."
    },
    {
      "name": "DruDoVolcano",
      "description": "Create both missiles at the valid target position"
    },
    {
      "name": "DruDoArmageddon",
      "description": "Create both missiles with a negative fall rate and slide rate. Use the “aurarangecalc” value to control a radius value, but this value is not used. Use the “cltcalc1” value to control the frame count for determining the starting height and offset. Use the cltcalc3 aurarangecalc cltmissileb cltmissilea 93 94 95 cltmissilea 96 aurarangecalc aurastate aurastat1 cltmissilea cltmissileb cltmissilec calc1 “cltcalc2” value to control the missile fall rate per frame. Use the “cltcalc3” value to control the missile slide rate per frame."
    },
    {
      "name": "MonDoCorpseCycler",
      "description": "Validate the target unit, and create the “cltmissileb” missile on the target and 3 blood missiles (see “bleed” in monstats2.txt)"
    },
    {
      "name": "MonDoDoomKnightMissile",
      "description": "Create the “cltmissilea” using either the lob function or the normal linear function, depending on the “lob” flag. Also select the missile or up to 3 index values higher, depending on the monster’s graphics variation for the “Special 3” component variation."
    },
    {
      "name": "MonDoNecroMageMissile",
      "description": "Create the “cltmissilea” using either the lob function or the normal linear function, depending on the “lob” flag. Also select the missile or up to 3 index values higher, depending on the monster’s graphics variation for the “Special 4” component variation."
    },
    {
      "name": "SorDoChainLightning2",
      "description": "Based on the “progressive” flag or the “aurastate” field, create the “cltmissilea” missile. Otherwise, use one of the 3 client missiles based on the “aurastat1” value. Create the missile and use the “calc1” value to set the number of chain hits."
    },
    {
      "name": "cltstopfunc",
      "description": "Client Stop function. This controls how the skill cleans up after ending. This uses a code value to call a function, affecting how certain fields are used. Parameters Code 0 1 Description Do nothing"
    },
    {
      "name": "SkillBarRemoveWhirlwind",
      "description": "Handles changing the collision and pathing of the caster, and also stops the whirlwind sound."
    },
    {
      "name": "cltprgfunc1 to (cltprgfunc3)",
      "description": "Controls which Client Do function is used when the skill is executed while having a progressive charge number equal to 1, 2, and 3, respectively. (uses “cltdofunc” values)"
    },
    {
      "name": "cltmissile",
      "description": "Used as a parameter for controlling what main missile is used for the client functions used (See “Missile” field in Missiles.txt)"
    },
    {
      "name": "cltmissilea (to cltmissiled)",
      "description": "Used as a parameter for controlling what secondary missile is used for the client functions used (See “Missile” field in Missiles.txt)"
    },
    {
      "name": "cltcalc1 (to cltcalc3)",
      "description": "Calculation Field. Use as a possible parameter for controlling values for the client functions."
    },
    {
      "name": "warp",
      "description": "Boolean Field. If equals 1 and the skill uses a function that involves warping/teleporting, then check for a scene transition loading screen, if necessary. If equals 0, then ignore this."
    },
    {
      "name": "immediate",
      "description": "Boolean Field. If equals 1 and the skill has a periodic function, then immediately perform the skill’s function when the periodic skill is activated. If equals 0, then wait until the skill’s first periodic delay before performing the skill’s function."
    },
    {
      "name": "enhanceable",
      "description": "Boolean Field. If equals 1, then the skill will be included in the plus to all skills item modifier. If equals 0, then the skill will not be included in the plus to all skills item modifier."
    },
    {
      "name": "attackrank",
      "description": "Controls the skill’s AI score value for determining what is the best target for the AI. The higher the value, then the more likely the AI will select a target with this skill equipped."
    },
    {
      "name": "noammo",
      "description": "Boolean Field. If equals 1, then the skill will not check that weapon’s ammo when performing an attack. This relies on the “Shoots” field from the ItemType.txt file. If equals 0, then the weapon will consume its ammo when being used by the skill."
    },
    {
      "name": "range",
      "description": "Determines how the unit uses the skill, which affects the weapon requirements and the type of attack used Code none h2h rng both loc Description No restrictions to use the skill This is a melee skill, which requires a melee weapon This is a ranged skill, which requires a ranged weapon This is both a melee and ranged skill, which can use either a melee or ranged weapon This is a location based skill, which ignores the weapon equipped and instead uses the player’s location"
    },
    {
      "name": "weapsel",
      "description": "If the unit can dual wield weapons, then this field will control how the weapons are used for the skill Code 0 1 2 3 4 Description Use the Left or Right Hand weapon Use the Left Hand weapon Use the Left and/or Right Hand weapon Always use both weapons Ignore the weapon used"
    },
    {
      "name": "itypea1 (to itypea3)",
      "description": "Controls what Item Types are included, or allowed, when determining if this skill can be used (See the “Code” field from ItemTypes.txt)"
    },
    {
      "name": "etypea1 & etypea2",
      "description": "Controls what Item Types are excluded, or not allowed, when determining if this skill can be used (See the “Code” field from ItemTypes.txt)"
    },
    {
      "name": "itypeb1 (to itypeb3)",
      "description": "Controls what alternate Item Types are included, or allowed, when determining if this skill can be used (See the “Code” field from ItemTypes.txt). This acts as a second set of Item Types to check."
    },
    {
      "name": "etypeb1 & etypeb2",
      "description": "Controls what alternate Item Types are excluded, or not allowed, when determining if this skill can be used (See the “Code” field from ItemTypes.txt). This acts as a second set of Item Types to check."
    },
    {
      "name": "anim",
      "description": "Controls the animation mode that the player character will use when using this skill. Setting the mode to Sequence (SQ) will cause the player character to play a time controlled animation sequence, utilizing certain sequence fields. Code DT NU WL RN GH TN TW A1 A2 BL Description Death Neutral Walk Run Get Hit Town Neutral Town Walk Attack 1 Attack 2 Block SC TH KK S1 S2 S3 S4 DD SQ KB Cast Throw Kick Skill 1 Skill 2 Skill 3 Skill 4 Dead Sequence Knockback"
    },
    {
      "name": "seqtrans",
      "description": "Uses the same inputs as the “anim” field. If the “anim” field equals SQ (Sequence) and this field equals SC (Cast), then the sequence animation speed can be modified by the faster cast rate stat modifier."
    },
    {
      "name": "monanim",
      "description": "Controls the animation mode that the monster will use when using this skill. This is similar to the “anim” field except with monster units using the skill instead of player units. Code DT NU WL GH A1 A2 BL SC S1 S2 S3 S4 DD KB xx RN Description Death Neutral Walk Get Hit Attack 1 Attack 2 block Cast Skill 1 Skill 2 Skill 3 Skill 4 Dead Knockback Sequence Run"
    },
    {
      "name": "seqnum",
      "description": "If the unit is a player and the “anim” used for the skill is a Sequence, then this field will control the index of which sequence animation to use. These sequences are specifically designed for certain skills, and each sequence has a set number of frames using certain animations. Code 0 (or empty) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Description Do nothing Jab Sacrifice Chastise Charge Defiance Inferno Strafe Impale Fend Whirlwind Double Swing Lightning Leap Leap Attack Double Throw Tiger Fist Projection Arctic Blast Triple Kick Dragon Breath Dragon Flight Druid Unmorph Assassin Blade Fury"
    },
    {
      "name": "seqinput",
      "description": "For skills that can repeat, this controls the number of frames to wait before the “Do” frame in the sequence. This acts as a delay in frames (25 Frames = 1 second) to wait within the sequence animation before it is allowed to be cast again or for looping back to the start of the sequence, such as for the Sorceress Inferno skill."
    },
    {
      "name": "durability",
      "description": "Boolean Field. If equals 1 and when the player character ends an animation mode that was not Attack 1, Attack 2, or Throw, then check the quantity and durability of the player’s items to see if the valid weapons are out of ammo or are broken. If equals 0, then ignore this."
    },
    {
      "name": "UseAttackRate",
      "description": "Boolean Field. If equals 1, then the current attack speed should be updated after using the skill, relative to the “attackrate” stat (See ItemStatCost.txt), and if the skill was an attacking skill. If equals 0, then the attack speed will not be updated after using the skill."
    },
    {
      "name": "LineOfSight",
      "description": "Controls the skill’s collision filters for valid target locations when it is being cast Code 0 1 2 3 4 5 Description No collision filter Missile Barrier"
    },
    {
      "name": "Player Path",
      "description": "Walls, no pathing, objects, doors, no player pathing"
    },
    {
      "name": "Player Monster",
      "description": "Monsters, Players"
    },
    {
      "name": "Player Flying",
      "description": "Missile barriers, doors"
    },
    {
      "name": "Radial Barrier",
      "description": "Missile barriers, doors, walls"
    },
    {
      "name": "TargetableOnly",
      "description": "Boolean Field. If equals 1, then the skill will require a target unit in order to be used. If equals 0, then ignore this."
    },
    {
      "name": "SearchEnemyXY",
      "description": "Boolean Field. If equals 1, then when the skill is cast on a target location, it will automatically search in different directions in the target area to find the first available enemy target. If equals 0, then ignore this. This field can be overridden if the “SearchEnemyNear” field is enabled."
    },
    {
      "name": "SearchEnemyNear",
      "description": "Boolean Field. If equals 1, then when the skill is cast on a target location, it will automatically find the nearest enemy target. If equals 0, then ignore this."
    },
    {
      "name": "SearchOpenXY",
      "description": "Boolean Field. If equals 1, then automatically search in a radius of size 7 in around the clicked target location to find an available unoccupied location to use the skill, testing for collision. If equals 0, then ignore this. This field can be overridden if the “SearchEnemyNear” or “SearchEnemyXY” field is enabled."
    },
    {
      "name": "SelectProc",
      "description": "Uses a function to check that the target is a corpse with various parameters before validating the usage of the skill Code 0 1 2 3 4 5 6 Description Do nothing"
    },
    {
      "name": "CorpseExplode",
      "description": "Check that the target is a corpse"
    },
    {
      "name": "RaiseSkeleton",
      "description": "Check that the target is a monster corpse, and that the corpse was a unit that has a velocity (if the unit does not move, then the corpse cannot be used)"
    },
    {
      "name": "Revive",
      "description": "Use the RaiseSkeleton function (Code = 2) and that the monser has a switchable AI"
    },
    {
      "name": "HeartMonster",
      "description": "Check that the target is a monster corpse and that the monster has the “soft” flag enabled (see monstats2.txt)"
    },
    {
      "name": "ItemMonster",
      "description": "Check that the target is a monster corpse"
    },
    {
      "name": "WardMonster",
      "description": "Check that the target is a monster corpse and that the monster has the “soft” flag enabled (see monstats2.txt)"
    },
    {
      "name": "TargetCorpse",
      "description": "Boolean Field. If equals 1, then the skill is allowed to target corpses. If equals 0, then skill cannot target corpses."
    },
    {
      "name": "TargetPet",
      "description": "Boolean Field. If equals 1, then the skill is allowed to target pets (summons and mercenaries). If equals 0, then the skill cannot target pets."
    },
    {
      "name": "TargetAlly",
      "description": "Boolean Field. If equals 1, then the skill is allowed to target ally units. If equals 0, then the skill cannot target ally units."
    },
    {
      "name": "TargetItem",
      "description": "Boolean Field. If equals 1, then the skill is allowed to target items on the ground. If equals 0, then the skill cannot target items."
    },
    {
      "name": "AttackNoMana",
      "description": "Boolean Field. If equals 1, then then when the caster does not have enough mana to cast the skill and attempts to use the skill, the caster will default to using the Attack skill. If equals 0, then attempting to use the skill without enough mana will do nothing."
    },
    {
      "name": "TgtPlaceCheck",
      "description": "Boolean Field. If equals 1, then check that the target location is available for spawning a unit, testing collision. If equals 0, then ignore this. This is only used for skills that monsters use to spawn new units."
    },
    {
      "name": "KeepCursorStateOnKill",
      "description": "Boolean Field. If equals 1, then the mouse click hold state will continue to stay active after killing a selected target. If equals 0, then after killing the target, the mouse click hold state will reset."
    },
    {
      "name": "ContinueCastUnselected",
      "description": "Boolean Field. If equals 1, then while the mouse is held down and there is no more target selected, then the skill will continue being used at the mouse’s location. If equals 0, then while the mouse is held down and there is no more target selected, then the player character will cancel the skill and move to the mouse location."
    },
    {
      "name": "ClearSelectedOnHold",
      "description": "Boolean Field. If equals 1, then when the mouse is held down, the target selection will be cleared. If equals 0, then ignore this."
    },
    {
      "name": "ItemEffect",
      "description": "Uses a Server Do function (See “srvdofunc”) for handling how the skill is used when it is triggered by an item, on the server side."
    },
    {
      "name": "ItemCltEffect",
      "description": "Uses a Client Do function (See “cltdofunc”) for handling how the skill is used when it is triggered by an item, on the client side."
    },
    {
      "name": "ItemTgtDo",
      "description": "Boolean Field. If equals 1, then use the skill from the enemy target instead of the caster. If equals 0, then ignore this."
    },
    {
      "name": "ItemTarget",
      "description": "Controls the targeting behavior of the skill when it is triggered by an item. Code 0 (or empty) 1 2 3 4 Description Default to targeting the attacker Target the caster Target a random location in a radius with a size of 20. Also tests collision. Target a random nearby corpse Target the attacker, and if that attacker is not found then target a previous attacker or the previous attacker’s location ItemUseRetrict – Boolean Field. If equals 1, then use the state restriction defined in the “restrict” field when being triggered by an item."
    },
    {
      "name": "ItemCheckStart",
      "description": "Boolean Field. If equals 1, then use the skill’s Server Start function (See “srvstfunc”) when the skill is trigged by an item. If equals 0, then the skill’s Server Start function is ignored."
    },
    {
      "name": "ItemCltCheckStart",
      "description": "Boolean Field. If equals 1, then when the skill is triggered by an item, and if the target is dead and the skill has a Client Start function (See “cltstfunc”), then add the “corpse_noselect” to the target. If equals 0, then ignore this."
    },
    {
      "name": "ItemCastSound",
      "description": "Play a sound when the skill is used by an item event. Points to a “Sound” value in the sounds.txt file."
    },
    {
      "name": "ItemCastOverlay",
      "description": "Add a cast overlay when the skill is used by an item event. Points to an “overlay” value in the Overlay.txt file."
    },
    {
      "name": "skpoints",
      "description": "Controls the number of Skill Points needed to level up the skill"
    },
    {
      "name": "reqlevel",
      "description": "Minimum character level required to be allowed to spend Skill Points on this skill"
    },
    {
      "name": "maxlvl",
      "description": "Maximum base level for the skill from spending Skill Points. Skill levels can be increased beyond this through item modifiers."
    },
    {
      "name": "reqstr",
      "description": "Minimum Strength attribute required to be allowed to spend Skill Points on this skill"
    },
    {
      "name": "reqdex",
      "description": "Minimum Dexterity attribute required to be allowed to spend Skill Points on this skill"
    },
    {
      "name": "reqint",
      "description": "Minimum Intelligence attribute required to be allowed to spend Skill Points on this skill"
    },
    {
      "name": "reqvit",
      "description": "Minimum Vitality attribute required to be allowed to spend Skill Points on this skill"
    },
    {
      "name": "reqskill1 (to reqskill3)",
      "description": "Points to a “skill” field to act as a prerequisite skill. The prerequisite skill must be least base level 1 before the player is allowed to spend Skill Points on this skill."
    },
    {
      "name": "restrict",
      "description": "Controls how the skill is used when the unit has a restricted state (See the “restrict” field in states.txt) Code 0 1 2 3 Description"
    },
    {
      "name": "None",
      "description": "The skill cannot be used when the unit has a restricted state"
    },
    {
      "name": "Any",
      "description": "The skill can be used in when the unit has any restricted state"
    },
    {
      "name": "State Only",
      "description": "The skill can only be used when the unit has a restricted state (See “State1” to “State3”)"
    },
    {
      "name": "Pop State",
      "description": "The skill can be used at any time but when used, it will remove the unit’s restrict states"
    },
    {
      "name": "State1 (to State3)",
      "description": "Points to a “state” field from the states.txt file. Used as parameters for the “restrict” field to control what specific states will restrict the usage of the skill."
    },
    {
      "name": "localdelay",
      "description": "Controls the Casting Delay duration for this skill after it is used (25 frames = 1 second)"
    },
    {
      "name": "globaldelay",
      "description": "Controls the Casting Delay duration for all other skills with Casting Delays after this skill is used (25 frames = 1 second)"
    },
    {
      "name": "leftskill",
      "description": "Boolean Field. If equals 1, then the skill will appear on the list of skills to assign for the Left Mouse Button. If equals 0, then the skill will not appear on the Left Mouse Button skill list."
    },
    {
      "name": "rightskill",
      "description": "Boolean Field. If equals 1, then the skill will appear on the list of skills to assign for the Right Mouse Button. If equals 0, then the skill will not appear on the Right Mouse Button skill list."
    },
    {
      "name": "repeat",
      "description": "Boolean Field. If equals 1 and the skill has no “anim” mode declared, then on the client side, the unit’s mode will repeat its current mode (this can also happen if the unit has the “inferno” state). If equals 0, then the unit will have its mode set to Neutral when starting to use the skill."
    },
    {
      "name": "alwayshit",
      "description": "Boolean Field. If equals 1, then skills that rely on attack rating and defense will ignore those stats and will always hit enemies. If equals 0, then ignore this."
    },
    {
      "name": "usemanaondo",
      "description": "Boolean Field. If equals 1, then the skill will consume mana on its do function instead of its start function. If equals 0, then the skill will consume mana on its start function, which is the general case for skills."
    },
    {
      "name": "startmana",
      "description": "Controls the required amount of mana to start using the skill. This only works with certain “srvstfunc” functions such as SorStartInferno (Code = 11) or AssStartBladeFury (Code = 26)."
    },
    {
      "name": "minmana",
      "description": "Controls the minimum amount of mana to use the skill. This can control skills that reduce in mana cost per level to not fall below this amount."
    },
    {
      "name": "manashift",
      "description": "This acts as a multiplicative modifier to control the precision of the mana cost after calculating the total mana cost with the “mana” and “lvlmana fields”. Mana is calculated in 256ths in code which equals 8 bits. This field acts as a bitwise shift value, which means it will modify the mana value by the power of 2. For example, if this value equals 5 then that means divide the mana value of 256ths by 2^5 = 32 (or multiply the mana by 32/256). A value equal to 8 means 256/256 which means that the mana of 256ths value is not shifted."
    },
    {
      "name": "mana",
      "description": "Defines the base mana cost to use the skill at level 1"
    },
    {
      "name": "lvlmana",
      "description": "Defines the change in mana cost per skill level gained"
    },
    {
      "name": "interrupt",
      "description": "Boolean Field. If equals 1, then the casting the skill will be interruptible such as when the player is getting hit while casting a skill. If equals 0, then the skill should be uninterruptible."
    },
    {
      "name": "InTown",
      "description": "Boolean Field. If equals 1, then the skill can be used while the unit is in town. If equals 0, then the skill cannot be used in town."
    },
    {
      "name": "aura",
      "description": "Boolean Field. If equals 1, then the skill will be classified as an aura, which will make the skill execute its function periodically (using the “perdelay” field), based on the if the “aurastate” state is active. Aura skills will also override a preexisting state if that state matches the skill’s “aurastate” state. If equals 0, then ignore this."
    },
    {
      "name": "periodic",
      "description": "Boolean Field. If equals 1, then the skill will execute its function periodically (using the “perdelay” field), based on the if the “aurastate” state is active. If equals 0, then ignore this."
    },
    {
      "name": "perdelay",
      "description": "Calculation Field. Controls the periodic rate that the skill continuously executes its function. Minimum value equals 5. This field requires “periodic” or “aura” field to be enabled."
    },
    {
      "name": "finishing",
      "description": "Boolean Field. If equals 1, then the skill will be classified as a finishing move, which can affect how progressive charges are consumed when using the skill and how the skill’s description tooltip is displayed. If equals 0, then ignore this."
    },
    {
      "name": "prgchargestocast",
      "description": "Controls how many progressive charges are required to cast the skill"
    },
    {
      "name": "prgchargesconsumed",
      "description": "Controls how many progressive charges are consumed when the skill attack hits an enemy"
    },
    {
      "name": "passive",
      "description": "Boolean Field. If equals 1, then the skill will be treated as a passive, which can mean that the skill will not show up in the skill selection menu and will not run a server do function. If equals 0, then the skill is an active skill that can be used."
    },
    {
      "name": "progressive",
      "description": "Boolean Field. If equals 1, then the skill will use the progressive calculations to act as a charge-up skill that will add charges. This is only used for certain skill functions and will generally require the usage of the “progcalc#” fields and the “aurastat#” fields. If equals 0, then ignore this."
    },
    {
      "name": "scroll",
      "description": "Boolean Field. If equals 1, then the skill can appear as a scroll version in the skill selection UI, if the skill allows for the scroll mechanics and if the player has the skill’s scroll item in the inventory. If equals 0, then ignore this."
    },
    {
      "name": "calc1 (to calc6)",
      "description": "Calculation Field. It is used as a possible parameter for skill functions or as a numeric input for other calculation fields."
    },
    {
      "name": "Param1 (to Param12)",
      "description": "Integer Field. It is used as a possible parameter for skill functions or as a numeric input for other calculation fields."
    },
    {
      "name": "InGame",
      "description": "Boolean Field. If equals 1, then the skill is enabled to be used in-game. If equals 0, then the skill will be disabled in-game."
    },
    {
      "name": "ToHit",
      "description": "Baseline bonus Attack Rating that is added to the attack when using this skill at level 1"
    },
    {
      "name": "LevToHit",
      "description": "Additional bonus Attack Rating when using this skill, calculated per skill level"
    },
    {
      "name": "ToHitCalc",
      "description": "Calculation Field. Calculates the bonus Attack Rating when using the skill. This will override the “ToHit” and “LevToHit” fields if it is not blank."
    },
    {
      "name": "ResultFlags",
      "description": "Controls different flags that can affect how the target reacts after being hit by the skill attack. Uses an integer value to check against different bit fields by using the “&” operator. For example, if the value equals 5 (binary = 101) then that returns true for both the 4 (binary = 100) and 1 (binary = 1) bit field values. Bit Field Value 1 2 4 8 16 32 128 256 512 4096 8192 16384 32768 Binary Equivalent Value 0000000000000001 0000000000000010 0000000000000100 0000000000001000 0000000000010000 0000000000100000 0000000010000000 0000000100000000 0000001000000000 0001000000000000 0010000000000000 0100000000000000 1000000000000000 Description Hit Death Get Hit Knockback Block No Passive Dodge Avoid Evade Ignore Friendly Double Damage Soft Hit"
    },
    {
      "name": "Two Hand",
      "description": "to-Hand Block"
    },
    {
      "name": "HitFlags",
      "description": "Controls different flags that can affect the damage dealt when the target is hit by the skill. Uses an integer value to check against different bit fields by using the “&” operator. For example, if the value equals 6 (binary = 110) then that returns true for both the 4 (binary = 100) and 2 (binary = 10) bit field values. Bit Field Value 1 Binary Equivalent Value 00000000001 Description Do not add physical damage 2 4 8 16 32 128 256 512 1024 00000000010 00000000100 00000001000 00000010000 00000100000 00010000000 00100000000 01000000000 10000000000 Do not add any damage No Life Steal No Mana Steal No Stamina Steal Use Source Damage No Triggered Events Bypass Undead Bypass Demons Bypass Beasts"
    },
    {
      "name": "HitClass",
      "description": "Defines the skill’s damage routines when hitting, mainly used for determining hit sound effects and overlays. Uses an integer value to check against different bit fields by using the “&” operator. For example, if the value equals 6 (binary = 110) then that returns true for both the 4 (binary = 100) and 2 (binary = 10) bit field values. There are binary masks to check between Base Hit Classes and Hit Class Layers, which can distinguish bewteen overlays or sounds are displayed. Bit Field Value Binary Equivalent Value Description Base Hit Classes 0 1 2 3 4 5 6 7 8 9 10 11 12 13 16 32 48 64 80 96 112 128 144 160 176 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 00001001 00001010 00001011 00001100 00001101 00010000 00010100 00011110 01000000 01010000 01100000 01110000 10000000 10010000 10100000 10110000 Hit Class Layers None Hand to Hand One Handed Swing Small One Handed Swing Large Two Handed Swing Small Two Handed Swing Large One Handed Thrust Two Handed Thrust Club Staff Bow Crossbow Claw Do Overlay Double Layer Fire Layer Cold Layer Lightning Layer Poison Layer Stun Layer Bash Layer Thorns Layer Sanctuary Layer Silent Voice Layer Goo Layer"
    },
    {
      "name": "Kick",
      "description": "Boolean Field. If equals 1, then a separate function is used to calculate the physical damage dealt by the skill, ignoring the following damage fields. This function will factor in the player character’s Strength and Dexterity attributes (or Monster’s level) to determine the baseline damage dealt. If equals 0, then ignore this."
    },
    {
      "name": "HitShift",
      "description": "Controls the percentage modifier for the skill’s damage. This value cannot be less than 0 or greater than 8. This is calculated in 256ths. Value 8 7 6 5 4 3 2 1 0 Description 256/256 128/256 64/256 32/256 16/256 8/256 4/256 2/256 1/256 Percentage 100% 50% 25% 12.5% 6.25% 3.125% 1.5625% .78125% .390625%"
    },
    {
      "name": "SrcDam",
      "description": "Controls the percentage modifier for how much weapon damage is transferred to the skill’s damage (Out of 128). For example, if the value equals 64, then 50% (64/128) of the weapon’s damage will be added to the skill’s damage."
    },
    {
      "name": "MinDam",
      "description": "Minimum baseline physical damage dealt by the skill"
    },
    {
      "name": "MinLevDam1 (to MinLevDam5)",
      "description": "Controls the additional minimum physical damage dealt by the skill, calculated using the leveling formula between 5 level thresholds of the missile’s current level. The level thresholds are levels 2-8, 9-16, 17-22, 23-28, 29 and beyond. These 5 level thresholds correlate to each field number."
    },
    {
      "name": "MaxDam",
      "description": "Maximum baseline physical damage dealt by the skill"
    },
    {
      "name": "MaxLevDam1 (to MaxLevDam5)",
      "description": "Controls the additional maximum physical damage dealt by the skill, calculated using the leveling formula between 5 level thresholds of the missile’s current level. The level thresholds are levels 2-8, 9-16, 17-22, 23-28, 29 and beyond. These 5 level thresholds correlate to each field number."
    },
    {
      "name": "DmgSymPerCalc",
      "description": "Calculation Field. Determines the percentage increase to the physical damage dealt by the skill."
    },
    {
      "name": "EType",
      "description": "Defines the type of elemental damage dealt by the skill. If this field is empty, then the related elemental fields below will not be used. Code (empty) fire ltng mag cold pois life Description None Fire Lightning Magic Cold (Uses “ELen”) Poison (Uses “ELen”) Life Drain mana stam stun rand burn frze Mana Drain Stamina Drain Stun (Uses “ELen”) Randomly select between Fire, Lightning, Magic, Cold, or Poison Burning (Uses “ELen”) Freeze (Uses “ELen”)"
    },
    {
      "name": "EMin",
      "description": "Minimum baseline elemental damage dealt by the skill"
    },
    {
      "name": "EMinLev1 (to EMinLev5)",
      "description": "Controls the additional minimum elemental damage dealt by the skill, calculated using the leveling formula between 5 level thresholds of the skill’s current level. The level thresholds are levels 2-8, 9-16, 17-22, 23-28, 29 and beyond. These 5 level thresholds correlate to each field number."
    },
    {
      "name": "EMax",
      "description": "Maximum baseline elemental damage dealt by the skill"
    },
    {
      "name": "EMaxLev1 (to EMaxLev5)",
      "description": "Controls the additional maximum elemental damage dealt by the skill, calculated using the leveling formula between 5 level thresholds of the missile’s current level. The level thresholds are levels 2-8, 9-16, 17-22, 23-28, 29 and beyond. These 5 level thresholds correlate to each field."
    },
    {
      "name": "EDmgSymPerCalc",
      "description": "Calculation Field. Determines the percentage increase to the total elemental damage dealt by the skill."
    },
    {
      "name": "ELen",
      "description": "The baseline elemental duration dealt by the skill. This is calculated in frame lengths where 25 Frames = 1 second. These fields only apply to appropriate elemental types with a duration."
    },
    {
      "name": "ELevLen1 (to ELevLen3)",
      "description": "Controls the additional elemental duration added by the skill, calculated using the leveling formula between 3 level thresholds of the missile’s current level. The level thresholds are levels 2-8, 9-16, 17 and beyond. These 3 level thresholds correlate to each field number. These fields only apply to appropriate elemental types with a duration."
    },
    {
      "name": "ELenSymPerCalc",
      "description": "Calculation Field. Determines the percentage increase to the total elemental duration dealt by the skill."
    },
    {
      "name": "aitype",
      "description": "Controls what the skill’s archetype for how the AI will handle using this skill. This mostly affects the mercenary AI and Shadow Warrior AI, but some types are used for general AI. Code 0 1 2 3 4 5 6 7 8 9 10 11 12 13 Description None Buff Debuff Summon Melee Ranged Aura Teleport Heal Resurrect Passive Area Range Steal Move Attack"
    },
    {
      "name": "aibonus",
      "description": "This is only used with the Shadow Master AI. This value is a flat integer rating that gets added to the AI’s parameters when deciding which skill is most likely to be used next. The higher this value, then the more likely this skill will be used by the AI."
    },
    {
      "name": "cost mult",
      "description": "Multiplicative modifier of an item’s gold cost, only when the item has a stat modifier with this skill. This will affect the item’s buy, sell, and repair costs (Calculated in 1024ths)."
    },
    {
      "name": "cost add",
      "description": "Flat integer modification of an item’s gold cost, only when the item has a stat modifier with this skill. This will affect the item’s buy, sell, and repair costs. This is added after the “cost mult” has modified the costs."
    }
  ],
  "filename": "skills.txt"
}